from .. import loader, utils
from datetime import datetime

@loader.tds
class DateInfo(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–µ"""
    strings = {'name': 'DateInfo'}
    
    birthdays = {}

    @loader.command()
    async def bd(self, message):
        """[–¥–µ–Ω—å] [–º–µ—Å—è—Ü] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        args = message.text.split()
        
        if len(args) != 3:
            await message.edit("üìõ <b>Error</b> | <code>.bd</code>\n<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø—Ä–∏–º–µ—Ä: 1 1)</b>")
            return

        try:
            day = int(args[1])
            month = int(args[2])
            
            if month < 1 or month > 12 or day < 1 or day > 31:
                await message.edit("üìõ <b>Error</b> | <code>.bd</code>\n<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
                return

            self.birthdays[message.sender_id] = (day, month)

            await message.edit(f"‚úÖ <b>Beautiful</b> | <code>.bd</code>\n<b>–í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {day} {month} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>")
        except ValueError:
            await message.edit("üìõ <b>Error</b> | <code>.bd</code>\n<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")

    @loader.command()
    async def di(self, message):
        """- –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è"""
        now = datetime.now()
        
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]

        seasons = [
            "–ó–∏–º–∞", "–ó–∏–º–∞", "–í–µ—Å–Ω–∞", "–í–µ—Å–Ω–∞",
            "–í–µ—Å–Ω–∞", "–õ–µ—Ç–æ", "–õ–µ—Ç–æ", "–õ–µ—Ç–æ",
            "–û—Å–µ–Ω—å", "–û—Å–µ–Ω—å", "–û—Å–µ–Ω—å", "–ó–∏–º–∞"
        ]

        emojis = {
            "–ó–∏–º–∞": ("‚òÉÔ∏è", "‚ùÑÔ∏è"),
            "–í–µ—Å–Ω–∞": ("üåπ", "üåæ"),
            "–õ–µ—Ç–æ": ("üçÉ", "ü™¥"),
            "–û—Å–µ–Ω—å": ("üçÇ", "üçÅ")
        }

        holidays = {
            (1, 1): "‚ùÑÔ∏è –ù–æ–≤—ã–π –≥–æ–¥",
            (2, 23): "üá∑üá∫ –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
            (3, 8): "üå∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
            (5, 1): "üõ† –ü—Ä–∞–∑–¥–Ω–∏–∫ –≤–µ—Å–Ω—ã –∏ —Ç—Ä—É–¥–∞",
            (5, 9): "ü´° –î–µ–Ω—å –ü–æ–±–µ–¥—ã",
            (6, 1): "ü•µ –î–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π",
            (6, 12): "üéâ –î–µ–Ω—å –†–æ—Å—Å–∏–∏",
            (9, 1): "üìö –î–µ–Ω—å –∑–Ω–∞–Ω–∏–π",
            (11, 4): "üá∑üá∫ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞",
            (2, 14): "ü©∑ –î–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö",
            (12, 31): "üéâ –ù–æ–≤—ã–π –≥–æ–¥ –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å—Ç–∏–ª—é"
        }

        current_year = now.year
        next_month_index = now.month 
        current_day = now.day
        current_weekday = now.strftime("%A")

        weekdays_ru = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        current_weekday_ru = weekdays_ru[current_weekday]
        weekend_days = ["–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_emoji = "‚ùï" if current_weekday_ru in weekend_days else "‚ùóÔ∏è"

        days_in_month = (datetime(current_year, (next_month_index % 12) + 1, 1) - datetime(current_year, next_month_index, 1)).days
        days_remaining = days_in_month - current_day
        last_day_of_year = datetime(current_year, 12, 31)
        days_until_end_of_year = (last_day_of_year - now).days

        holiday = holidays.get((now.month, now.day), None)
        holiday_message = f"üéâ<b>{holiday}!</b>" if holiday else "üò≠ <b>–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫ –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è</b>"
        is_leap_year = (current_year % 4 == 0 and current_year % 100 != 0) or (current_year % 400 == 0)

        next_leap_year = current_year + 1
        while not ((next_leap_year % 4 == 0 and next_leap_year % 100 != 0) or (next_leap_year % 400 == 0)):
            next_leap_year += 1
        days_until_next_leap_year = (datetime(next_leap_year, 2, 29) - now).days if not is_leap_year else 0

        birthday_message = ""
        if message.sender_id in self.birthdays:
            bd_day, bd_month = self.birthdays[message.sender_id]
            if bd_day == current_day and bd_month == next_month_index:
                birthday_message = f"üéÇ <b>–°–µ–≥–æ–¥–Ω—è –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!</b>"
            else:
                next_birthday_year = current_year if (bd_month > next_month_index or (bd_month == next_month_index and bd_day > current_day)) else current_year + 1
                next_birthday_date = datetime(next_birthday_year, bd_month, bd_day)
                days_until_birthday = (next_birthday_date - now).days
                birthday_message = f"üéâ <b>–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_until_birthday} –¥–Ω–µ–π</b>"

        current_season = seasons[next_month_index - 1]
        current_emojis = emojis[current_season]

        response = (
            f"{current_emojis[0]} <b>–°–µ–π—á–∞—Å:</b> <code>{months[next_month_index - 1]} ({next_month_index})</code>\n"
            f"{current_emojis[1]} <b>–í—Ä–µ–º—è –≥–æ–¥–∞</b>: <code>{current_season}</code>\n\n"
            f"{day_emoji} <b>–ß–∏—Å–ª–æ:</b> <code>{current_day}</code>\n"
            f"üìÖ <b>–ì–æ–¥:</b> <code>{current_year}</code>\n"
            f"üí¨ <b>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b> <code>{current_weekday_ru}</code>\n"
            f"{holiday_message}\n"
            f"{birthday_message}\n\n"
            f"üí§ <b>–í—Å–µ–≥–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ:</b> <code>{days_in_month}</code>\n"
            f"‚úÖ <b>–î–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å <code>{days_remaining}</code> –¥–Ω–µ–π</b>\n"
            f"üìÜ <b>–î–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å <code>{days_until_end_of_year}</code> –¥–Ω–µ–π</b>\n"
            f"üîÑ <b>–≠—Ç–æ {'–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π' if is_leap_year else '–Ω–µ –≤—ã—Å–æ–∫–æ–≥–æ'} –≥–æ–¥</b>\n"
            f"‚è≥ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</b> <code>{days_until_next_leap_year}</code> –¥–Ω–µ–π\n"
            f"‚û°Ô∏è <b>–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü</b>: <code>{months[next_month_index % 12]}</code>"
        )
        
        await message.respond(response)
        await message.delete()
        
    @loader.command()
    async def mi(self, message):
        """- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º"""
        await utils.answer(message, "üï° <b>–°—á–∏—Ç–∞—é..</b>")
        monts_indeks = """üåú <b>–ú–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º</b>
üå®Ô∏è <b>–Ø–Ω–≤–∞—Ä—å:</b> <code>1</code>
üèîÔ∏è <b>–§–µ–≤—Ä–∞–ª—å:</b> <code>2</code>
üå•Ô∏è <b>–ú–∞—Ä—Ç:</b> <code>3</code>
üå∏ <b>–ê–ø—Ä–µ–ª—å:</b> <code>4</code>
üåπ <b>–ú–∞–π:</b> <code>5</code>
üå°Ô∏è <b>–ò—é–Ω—å:</b> <code>6</code>
üî• <b>–ò—é–ª—å:</b> <code>7</code>
ü•Ä <b>–ê–≤–≥—É—Å—Ç:</b> <code>8</code>
üå¶Ô∏è <b>–°–µ–Ω—Ç—è–±—Ä—å:</b> <code>9</code>
üçÇ <b>–û–∫—Ç—è–±—Ä—å:</b> <code>10</code>
üçÅ <b>–ù–æ—è–±—Ä—å:</b> <code>11</code>
üå®Ô∏è <b>–î–µ–∫–∞–±—Ä—å:</b> <code>12</code>"""
        await utils.answer(message, monts_indeks)