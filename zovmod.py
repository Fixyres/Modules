from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class ZOVMod(loader.Module):
    strings = {
        "name": "ZOV Text Modifier"
    }

    async def client_ready(self, client, db):
        self.db = db
        self._client = client
        self.enabled = self.db.get("zovmod", "enabled", False)

    async def zovcmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º ZOV —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º vivo"""
        args = utils.get_args_raw(message)
        self.enabled = not self.enabled
        self.db.set("zovmod", "enabled", self.enabled)

        if self.enabled:
            response = "<b><emoji document_id=5260237736664643163>üî§</emoji> –†–µ–∂–∏–º ZOV —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.</b>"
            if args == "vivo":
                self.db.set("zovmod", "vivo_mode", True)
            else:
                self.db.set("zovmod", "vivo_mode", False)
        else:
            response = "<emoji document_id=5210952531676504517>üö´</emoji> <b>–†–µ–∂–∏–º ZOV –æ—Ç–∫–ª—é—á–µ–Ω</b>"

        await utils.answer(message=message, response=response)

    async def watcher(self, message: Message):
        if self.enabled and message.out:
            # –ó–∞–º–µ–Ω—è–µ–º –±—É–∫–≤—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            new_text = message.text.translate(str.maketrans({
                '–æ': 'O', '–û': 'O',
                '–∑': 'Z', '–ó': 'Z',
                '–≤': 'V', '–í': 'V',
                '–Ω': 'N', '–ù': 'N',
                '—à': 'Zh', '–®': 'Zh'
            }))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º vivo
            if self.db.get("zovmod", "vivo_mode", False):
                new_text += "\n–°–º–∞—Ä—Ç—Ñ–æ–Ω vivo"

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
            await self._client.edit_message(message.peer_id, message.id, new_text)