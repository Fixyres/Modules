# -----------------------Immports---------------
# scope: hikka_only
# requires: Hikka-TL-New, pytz

__version__ = (1, 8, 0)

import contextlib
import hikkatl
from hikkatl.tl.functions.channels import GetParticipantsRequest
from hikkatl.errors import TimeoutError, BotResponseTimeoutError
from hikkatl.errors.rpcerrorlist import (
    FloodWaitError,
    MessageNotModifiedError,
)
from hikkatl.tl.types import (
    Message,
    User,
    MessageEntityPhone,
    MessageEntityMentionName,
    MessageEntityTextUrl,
    MessageEntityMention,
    MessageEntityUrl,
    Channel,
    PeerChannel,
    MessageReplies,
)
from hikkatl.tl.types import ChannelParticipantsSearch

from .. import loader, utils
from typing import Union, Optional, Any
from ..inline.types import InlineCall

import pytz
import re
import asyncio
from asyncio.exceptions import TimeoutError
from datetime import datetime, timedelta
import logging
import json as Json

from random import SystemRandom

randint = SystemRandom().randint
choices = SystemRandom().choices
uniform = SystemRandom().uniform

import unicodedata

MEP = MessageEntityPhone
MEMN = MessageEntityMentionName
METU = MessageEntityTextUrl
MENT = MessageEntityMention
MEU = MessageEntityUrl

logger = logging.getLogger('BioWars')
re._MAXCA–°HE = 3000
DT_FORMAT = '%d/%m/%Y %H:%M:%S'
DT_FORMAT2 = '%d.%m.%Y'


# ---------------------------Module--------------------

def check_trash_bio(trash):
    return '–ª–∞–±' in trash.lower() and '—Ç–æ–ø' in trash.lower()


def isbio(text):
    bio_items = text[text.find('1. '):]
    bio_trash = text[:text.find('1. ')]
    if not check_trash_bio(bio_trash):
        return False, False
    if len(bio_items) <= 1:
        return False, False
    bio_list = bio_items.splitlines()
    m = len(bio_list)
    for i in range(m):
        if not bio_list[i].startswith(f"{i + 1}. "):
            return False, False
    return True, len(bio_trash.splitlines())


class Timezone_Validator(loader.validators.Validator):
    def __init__(self):
        super().__init__(self._validate,
                         {
                             'ru': '–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π –¥–ª—è pytz',
                             'en': 'timezone for pytz'
                         }
                         )

    @staticmethod  #
    def _validate(value: Any) -> str:
        if value.lower() not in [_.lower() for _ in pytz.all_timezones]:
            raise loader.validators.ValidationError(
                f'–í—Ä–µ–º–µ–Ω–∞—è –∑–æ–Ω–∞ "{value}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

        return f'{value}'


class iris:
    bots = [
        707693258,  # üîµ Iris | –ß–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
        5226378684,  # üü£ Iris | Deep Purple
        5137994780,  # üü° Iris | Bright Sophie
        5434504334,  # ‚ö™Ô∏è Iris | Moonlight Dyla
        5443619563,  # üé© Iris | Black Diamond
    ]

    chats = [
        -1001491081717,  # üë®üèº‚Äçüíª Iris | –ü–æ–º–æ—â—å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
        -1001421482914,  # ü™í Iris | –û—Ñ—Ñ—Ç–æ–ø
        -1001284208391,  # üìõ Iris | –ê–Ω—Ç–∏—Å–ø–∞–º –¥—Ä—É–∂–∏–Ω–∞
        -1001463965279,  # üåï Iris | –ë–∏—Ä–∂–∞
        -1001316297204,  # ü¶† Iris | –ë–∏–æ–≤–æ–π–Ω—ã
        -1001323663801,  # üç¨ Iris | –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã
        -1001687821774,  # üì£ Iris | –ß–∞—Ç –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        -1001283847535,  # ‚úçÔ∏è Iris | –û—Ç–∑—ã–≤—ã –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
        -1001667453682,  # üî´ Iris | –ó–æ–ª–æ—Ç—ã–µ –¥—É—ç–ª–∏
    ]

    prefs = [
        '–∏—Ä–∏—Å', '–∏—Ä–∏—Å–∫–∞',
        '.', '/', '!'
    ]

    _prefs = [
        '–∏—Ä–∏—Å ', '–∏—Ä–∏—Å–∫–∞ ',
        '.', '/', '!',
        '. ', '/ ', '! '
    ]


def _exp(exp: str) -> int:
    """–æ–ø—ã—Ç —Å –∂–µ—Ä—Ç–≤—ã –≤ –∏–Ω—Ç"""
    exp = ''.join(exp.split()).lower().replace('–∫', 'k').replace('.', ',')

    if not 'k' in exp:
        exp = exp

    else:
        if not ',' in exp:
            exp = exp[:len(exp) - 1] + '000'

        else:
            exp = exp[:len(exp) - 1].replace(',', '') + '00'

    return int(exp)


def time_emoji(time: str):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–¥"""
    emj = {
        'exp': '–∫–¥'
    }

    return emj[min(emj)]


def dict_split(Dict: dict, s: int = 50, reverse: bool = True) -> list:
    keys = list(Dict.keys()) if not reverse else list(reversed(Dict.keys()))
    lists = []

    for i in range(0, len(keys), s):
        e_c = keys[i: s + i]
        if len(e_c) < s:
            e_c = e_c + [None for y in range(s - len(e_c))]
        lists.append(e_c)

    return lists


def sanitise_text(text: str) -> str:  # by hikari
    """
    Replaces all animated emojis in text with normal ones,
    bc aiogram doesn't support them
    :param text: text to sanitise
    :return: sanitised text
    """
    return re.sub(r"</?emoji.*?>", "", text)


def repair_text(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Å —Ç–µ–∫—Å—Ç–∞ –∑–∞–ª—å–≥–æ, —Ç–µ–≥–∏
    """
    return utils.escape_html(
        ''.join(
            _ for _ in unicodedata.normalize('NFD', text)
            if unicodedata.category(_) != 'Mn'
        )
    )


def get_ne_pridumal(text: str, at: bool = False) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    users = []

    for _ in range(len(text)):
        before_len = len(text)

        if r := re.search(r'tg://user\?id=(\d+)', text, flags=re.ASCII):
            users.append(r.group(1))
            text = text.replace(r.group(0), '')

        if r := re.search(r'@(\d+)', text, flags=re.ASCII):
            users.append(r.group(1))
            text = text.replace(r.group(0), '')

        if r := re.search(r'@([a-zA-Z][\w\d]{3,30}[a-zA-Z\d])',
                          text):  # from https://tl.telethon.dev/methods/contacts/resolve_username.html#:~:text=UsernameInvalidError
            users.append(r.group(1))
            text = text.replace(r.group(0), '')

        if r := re.search(r'tg://openmessage\?user_id=(\d+)', text, flags=re.ASCII):
            users.append(r.group(1))
            text = text.replace(r.group(0), '')

        if r := re.search(r'(https://|)t\.me/([a-zA-Z][\w\d]{3,30}[a-zA-Z\d])', text, flags=re.ASCII):
            users.append(r.group(2))
            text = text.replace(r.group(0), '')

        if before_len == len(text):
            break

    _users = []
    for _ in users:
        if _ not in _users:
            _users.append(_)

    if at:
        return [f'@{_}' for _ in _users]

    return _users


def unix_dt(date: float) -> datetime:
    """
    Unix –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
    """
    return datetime.fromtimestamp(date)


def strtime(date: Union[datetime, float]):
    if isinstance(date, float):
        date = unix_dt(date)

    return da


@loader.tds
class BioWars(loader.Module):
    """üì° –ë–æ—Ç –¥–ª—è –±–∏–æ-–≤–æ–π–Ω Lapik Edition (beta)"""

    # emj = {
    #    'exp': '<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji>'
    # }

    strings = {
        "name": "BioWars",
        "link_id": "tg://openmessage?user_id=",
        "link_username": "https://t.me/",

        "—Åommands": {
            "z": "[args] [reply] ",
            "id": "[arg/reply] -",
            "ids": "[args] [reply] - –ß–µ–∫–∞–µ—Ç –∞–π–¥–∏ –ø–æ —Ä–µ–ø–ª–∞—é",
            "dov": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–≤–µ—Ä–∫–µ",
            'zz': '–ê–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã .–± –∏–∑ –±–∏–æ',
            'nik': '[id] [–∏–º—è] - –∑–∞–ø–∏—Å—å —á–µ–ª–æ–≤–µ–∫–∞',
            'pref': '[id] [–ø—Ä–µ—Ñ–∏–∫—Å] - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ–≤–∞'
        },
        # –ó–∞—Ä–ª–∏—Å—Ç
        'zar.search':
            "‚úÖ –ñ–µ—Ä—Ç–≤–∞ {} –ø—Ä–∏–Ω–æ—Å–∏—Ç\n"
            "‚ò£Ô∏è +{} –æ–ø—ã—Ç–∞\n"
            'üî≠ –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {} ',

        '_zar.search':
            "‚úÖ –ñ–µ—Ä—Ç–≤–∞ {} –ø—Ä–∏–Ω–æ—Å–∏—Ç\n"
            "‚ò£Ô∏è +{} –æ–ø—ã—Ç–∞ {} \n"
            'üî≠ –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {}',

        'zar.save':
            "‚úÖ –ñ–µ—Ä—Ç–≤–∞ <code>{}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
            "‚ò£Ô∏è<s>{}</s> +{} –æ–ø—ã—Ç–∞ \n"
            "üî≠ –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {} ",

        'z.nf': '‚ùé –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∂–µ—Ä—Ç–≤–µ <code>{}</code>',
        '_z.nf': '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{}</code> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',

        'edit_nik': '‚úÖ –ò–º—è –∂–µ—Ä—Ç–≤—ã ¬´<a href = "tg://openmessage?user_id={0}">{1}</a>¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ',
        'edit_pref': '‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å ¬´{}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è <code>@{}</code>',
        # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –º–æ–¥—É–ª—é
        "bio.commands": "\n\n"
                        "üì° –ë–æ—Ç –¥–ª—è –±–∏–æ-–≤–æ–π–Ω Lapik Edition (beta): \n\nüó∫ –õ–∏—á–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: <code>{0}</code>\n\n"

                        "üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                        "üç™ <code>{0}–ø–æ–º–æ—â—å</code> ‚Äî –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "üç™ <code>{0}ping</code> ‚Äî —É–∑–Ω–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞\n"
                        "üç™ –ª ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–±–µ\n"
                        "üç™ –∑–∞—Ä–∞–∑–∏—Ç—å, –∑–∞—Ä–∞–∑–∏, –µ–±, —ë–±, –±–µ–π ‚Äî –∞—Ç–∞–∫–æ–≤–∞—Ç—å\n"
                        "üç™ –≤–∞–∫, —Ö–∏, –ª–µ—á–∏—Å—å ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç –≤–∞–∫—Ü–∏–Ω—É\n"
                        "üç™ –±–∏–æ, –∑ ‚Äî –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–ø—ã—Ç —Å –∂–µ—Ä—Ç–≤\n"
                        "üç™ –∫ ‚Äî –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–µ–∫\n"
                        "üç™ <code>{0}pref</code> ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ–≤–∞\n"
                        "üç™ <code>{0}ids</code> <code>{0}id</code> ‚Äî —á–µ–∫–∞–µ—Ç –∞–π–¥–∏ –ø–æ —Ä–µ–ø–ª–∞—é\n"
                        "üç™ <code>{0}dov</code> ‚Äî –≤—ã–≤–æ–¥ –¥–æ–≤ –∫–æ–º–∞–Ω–¥\n"
                        "üÜï —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤ ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∂–µ—Ä—Ç–≤\n"
                        "üÜï —Ç–æ–ø –∂–µ—Ä—Ç–≤ ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∂–µ—Ä—Ç–≤\n"
                        "üÜï <code>{0}nik</code> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω –∂–µ—Ä—Ç–≤\n"
                        "üÜï –±–æ–ª, –±–æ–ª–µ–∑–Ω–∏ ‚Äî –≤—ã–≤–æ–¥ –≤–∞—à–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π\n"
                        "üÜï –∂–¥ ‚Äî —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n\n"

                        "üîñ <code>{0}–ø–æ–º–æ—â—å –∏–Ω—Ñ–æ</code> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è \n",
        'bio.info':
            '‚öôÔ∏è –ù–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
            'üìä –ñ–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ: {} \n'
            'üß¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–µ–º–∏—è: {} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–∞\n'
            'üñç –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö: {} \n'
            'üç™ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}',

        "bio.zar": "—Ç—É—Ç –ø—É—Å—Ç–æ",
        "bio.dov": "—Ç—É—Ç –ø—É—Å—Ç–æ",
        'bio.dov.levels':
            '‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –¥–æ–≤–µ—Ä–∫–∏: \n\n'
            'üîß –°—É—â–µ—Å—Ç–≤—É–µ—Ç 4 —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∫–∏ \n\n'
            'üç™ 1 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º | –≤–∞–∫—Ü–∏–Ω–∞ | –¥–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É \n'
            'üç™ 2 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ª–∏—Å—Ç–æ–º | –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–µ—Ä—Ç–≤ \n'
            'üç™ 3 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>:  –±–æ–ª–µ–∑–Ω–∏ | –º–µ—à–æ–∫ | —á–µ–∫ –Ω–∞–≤—ã–∫–æ–≤ \n'
            'üç™ 4 —É—Ä–æ–≤–µ–Ω—å: \n'
            '   <i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>: –§—É–ª–ª –ª–∞–±–∞ | —Å–º–µ–Ω–∞ (–ø–∞—Ç–∞|–ª–∞–±—ã) | –≤–∫–ª—é—á–∞—Ç—å –≤–∏—Ä—É—Å—ã | –ø—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ \n\n'
            'üîñ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: \n'
            '–í—Å–µ–º –æ–≤–Ω–µ—Ä–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç—Å—è 4 —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏ \n',
        # –í—Å–µ —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ–≤–µ—Ä–∫–µ
        "dov": "‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≤–µ—Ä–∫–µ\n\nüó∫ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: <code>{1}</code>\n\n"
               "üìå –ö–æ–º–∞–Ω–¥—ã dov:\n"
               "üç™ <code>{0}dov dovs</code> ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π \n"
               "üç™ <code>{0}dov prefs</code> ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π \n"
               'üç™ <code>{0}dov set</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å|–£–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞ \n'
               "üç™ <code>{0}dov set</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å| –ø–æ–≤—ã—Å–∏—Ç—å/–ü–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏\n"
               "üç™ <code>{0}dov nik</code> [–Ω–∏–∫] ‚Äî —Å–º–µ–Ω–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å \n"
               "üç™ <code>{0}dov st</code> ‚Äî –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏ \n"
               "üÜó –°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∫–∏: {3} \n\n"
               "üîñ <code>{0}–ø–æ–º–æ—â—å –¥–æ–≤–µ—Ä–∫–∞ -—É—Ä–æ–≤–Ω–∏</code> ‚Äî –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–≤–Ω—è—Ö –¥–æ–≤–µ—Ä–∫–∏:",

        'dov.users': 'üìä –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n' \
                     '{}',
        "dov.users.chat": 'üìä –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ: \n' \
                          '{}',
        "dov.prefs": 'üìä –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: \n'
                     '{}',
        "dov.prefs.chat": 'üìä –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: \n' \
                          '{}',

        # –ö–æ–º–∞–Ω–¥—ã –¥–æ–≤–µ—Ä–∫–∏
        "dov.rem": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>@{}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "dov.add":
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>@{}</code> <b>—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º \n"
            "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏: {}",
        'dov.edit_level':
            'üç™ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∫–∏ —É <code>@{}</code> –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω \n'
            '‚úÖ <b> <s>{}</s> ‚á® {}</b>',
        "nick.rename": "" \
                       "‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω—ë–Ω <s>{0}</s> ‚á® <b><code>{1}</code></b>",
        "dov.status.True": "‚úÖ –î–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        "dov.status.False": "‚ùé –î–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        # –û—à–∏–±–∫–∏
        "no.reply": "üôÑ –û—Ç—Å—É—Å—Ç–≤—É–µ—Ç —Ä–µ–ø–ª–∞–π",
        "no.args": "üôÑ –û—Ç—Å—É—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "no.args_and_reply": "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ '–±–µ–π':\n\n"
                             "üñä –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–º–µ–µ—Ç –∑–∞—Ä–∞–∂–∞—Ç—å –∫–∞–∫ —É–∫–∞–∑–∞–Ω–Ω—É—é –∂–µ—Ä—Ç–≤—É –≤ —Å–≤–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –∫–æ–º–∞–Ω–¥–µ.\n\n"
                             "üñç –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è; –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ –±—É–¥–µ—Ç –∑–∞—Ä–∞–∂–∞—Ç—å—Å—è –≤–µ—Å—å —Å–ø–∏—Å–æ–∫.\n\n"
                             "üñã –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –∂–µ—Ä—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–µ–π 2 3 5-10'",
        "args_error": 'üôÑ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
        "len_error": "üìò –ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤. –õ–∏–º–∏—Ç 8 —Å–∏–º–≤–æ–ª–æ–≤",
        "hueta": "üò∂ –¢–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ —Ç—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?",
        # –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞
        "messages.biotop": [
            "üìñ –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π:\n",
        ],
        'messages.misc': [
            "üìñ –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π:\n",
        ],
        'wrong_click': [
            'üîû –¢–µ–±–µ —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ..',
            '‚ö†Ô∏è –ù–ï –¢–†–û–ñ–¨ –ß–£–ñ–ò–ï –ö–ù–û–ü–ö–ò',
            '–ü–∞–ª—å—Ü—ã –æ—Ç—Ä–µ–∂—É –∏ —Å–æ–±–∞–∫–∞–º –æ—Ç–¥–∞–º',
            "‚ö†Ô∏è –õ—é–±–æ–ø—ã—Ç–Ω–æ–π –í–∞—Ä–≤–∞—Ä–µ –Ω–∞ –±–∞–∑–∞—Ä–µ –Ω–æ—Å –æ—Ç–æ—Ä–≤–∞–ª–∏ ",
        ],
        "get_user": "üöÄ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n"
                    "ü•∑üèª <a href='tg://openmessage?user_id={}'>{}</a> \n"
                    "üìÉ –Æ–∑–µ—Ä–Ω–µ–π–º: @{} \n"
                    "üÜî –ê–π–¥–∏: <code>@{}</code>",

        'calc_formul': {
            'zar': 2.5,
            'imun': 2.45,
            'sb': 2.1,
            'kvala': 2.6,
            'pat': 2,
            'letal': 1.95
        }

    }

    # -----------------------Functions-------------------

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "–†–µ–∂–∏–º –±–∏–æ",
                True,
                "–†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥—ã –±–∏–æ\n"
                # –ª–µ–Ω—å —á–∏—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ö–∏–∫–∫–∏, –¥–∞ –∏ –∑–∞—á–µ–º –±–æ–ª—å—à–µ 2—Ö –º–û–¥–æ–≤)
                "True - –ü–µ—Ä–≤—ã–π, False - –í—Ç–æ—Ä–æ–π",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏",
                True,
                "–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∫–∏",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤",
                True,
                "–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–¢–∏—Ö–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                True,
                "–°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è WARNING (30)",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–ê–≤—Ç–æ—Ö–∏–ª–ª",
                True,
                "–ê–≤—Ç–æ—Ö–∏–ª–ª(–ë–ï–¢–ê) \n–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–£–¥–∞–ª–µ–Ω–∏–µ —Å–º—Å",
                False,
                "–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–º—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞",
                "Europe/Moscow",
                "",
                validator=Timezone_Validator(),
            ),
            loader.ConfigValue(
                '–ê—Ä–≥—É–º–µ–Ω—Ç—ã –ª–∞–±—ã',
                'p np be br f',
                '–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–∞–±—ã',
                validator=loader.validators.String(),
            ),
            # loader.ConfigValue(
            #    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–æ–≤",
            #    False,
            #    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–æ–≤",
            #    validator=loader.validators.Boolean(),
            # ),
        )
        self.tz = self.config['–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞']

    async def client_ready(self, client, db):
        # Nummod + BioWars
        self.client = client
        self.db = db
        # NumMod
        if not self.db.get("NumMod", "numfilter"):
            # –î–æ–±–≤–ª–µ–Ω–∏–µ –æ–≤–Ω–µ—Ä–æ–≤ —é–± –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–≤—à–∏—Ö—Å—è –ª—é–¥–µ–π
            # –ê–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–∞–º —Ç–æ–∂–µ –ø—Ä–∏—Å—É—Å—Ç–≤—É–µ
            owners = list(getattr(self.client.dispatcher.security, "owner"))
            self.db.set(
                "NumMod",
                "numfilter",
                {"users": owners, "filter": None, "status": False},
            )
        # infList        # infList
        if not self.db.get("NumMod", "infList"):
            self.db.set("NumMod", "infList", {})

        if not self.db.get("BioWars", "DovUsers"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≤–Ω–µ—Ä–æ–≤ —é–± –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–≤—à–∏—Ö—Å—è –ª—é–¥–µ–π
            # –ê–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–∞–º —Ç–æ–∂–µ –ø—Ä–∏—Å—É—Å—Ç–≤—É–µ
            owners = list(getattr(self.client.dispatcher.security, "owner"))
            users = {}
            for i in self.db.get("NumMod", "numfilter")["users"]:
                users[str(i)] = 1
            for i in owners:
                users[str(i)] = 4
            self.db.set("BioWars", "DovUsers", users)

        if not self.db.get('BioWars', 'FamousUsers'):
            self.db.set('BioWars', 'FamousUsers', {})
            # {id : username }
        if not self.db.get('BioWars', 'LastInfect'):
            self.db.set('BioWars', 'LastInfect', None)

        if not self.db.get('BioWars', 'InfectionBefore'):
            self.db.set('BioWars', 'InfectionBefore', {})

        if not self.db.get('BioWars', 'YourLetal'):
            self.db.get('BioWars', 'YourLetal', 1)
            # –í–∞—à –ª–µ—Ç–∞–ª, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç
        if not self.db.get('BioWars', 'UsersNik'):
            self.db.set('BioWars', 'UsersNik', {})
            # user_id : –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫
        if not self.db.get('BioWars', 'FamousPrefs'):
            self.db.set('BioWars', 'FamousPrefs', {})
            # user_id : pref
        # –ü—Ä–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞–≤–∏—Ç—Å—è True
        # –°—Ç–∞—Ç—É—Å –∑–∞—Ä–∞–∂–µ–Ω–∏—è
        self.db.set("BioWars", "infStatus", False)
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.db.set("BioWars", "infInterval", 5)
        # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–¥ # 'id': 'time'
        if not self.db.get('BioWars', 'Cooldown'):
            self.db.set('BioWars', 'Cooldown', {})
        # –∞–≤—Ç–æ—Ö–∏–ª–ª
        if not self.get('AutoHill') or not isinstance(self.get('AutoHill'), str):
            self.set('AutoHill', '26/03/2023 09:00:00')
        if not self.db.get('BioWars', 'Diseases'):
            """–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≤–µ—Ä—Å–∏–∏ '–º–æ–∏ –±–æ–ª–µ–∑–Ω–∏"""
            self.db.set('BioWars', 'Diseases', {})

        self.zl = self.db.get("NumMod", "infList")
        self.zl_do = self.db.get('BioWars', 'InfectionBefore')
        self.bol = self.db.get('BioWars', 'Diseases')
        self.fau = self.db.get('BioWars', 'FamousUsers')
        self.dovs = self.db.get("BioWars", "DovUsers")
        self.niks = self.db.get('BioWars', 'UsersNik')
        self.prefs = self.db.get('BioWars', 'FamousPrefs')
        self.letal = self.db.get('BioWars', 'YourLetal')
        self._cooldown = self.db.get('BioWars', 'Cooldown')
        # await self.subscibe_channel()

    @loader.loop(interval=(60 * 60), autostart=True)
    async def loop(self):
        for key, value in self._cooldown.copy().items():
            """–æ—á–∏—â–∞–µ—Ç –±–¥ –æ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"""
            cd_time = datetime.strptime(value, DT_FORMAT)
            cd_time = str(
                (cd_time - datetime.now())).split('.')[0]
            if '-' in cd_time:
                del self._cooldown[key]

        # for _ in self.get('messages_for_clear', []):
        #    """—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ –≤—Ä–µ–º—è conversation"""
        #    with contextlib.suppress(Exception):
        #        await self.client.delete_messages(_[0], _[1])

    def save_victim(self, user: Union[str, int], exp: int):
        user = str(user)
        letal = self.letal if self.letal != 1 else None

        if user in self.zl.keys():
            del self.zl

        self.zl[user] = {
            'exp': _exp(exp),
            'date': datetime.now().timestamp(),
            'date_to': (datetime.now() + timedelta(days=letal)).timestamp() if letal else None,
        }

    def get_victim(user: Union[str, int]):
        user = str(user)
        if user not in self.zl.keys():
            return False

        return {'id': int(user), **self.zl[user]}

    async def last_msg(self, message: Message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        """
        return [
            _ async for _ in self._client.iter_messages(
                message.peer_id, 1, max_id=message.id
            )
        ][0]

    async def zar_search(self, message: Message, user: str) -> None:

        if not user[1:].isdigit():
            r = await self.return_user(username=user.lower())
            if r == 'FloodWait':
                await message.reply('—Ñ–ª—É–¥–≤–µ–π—Ç, –∏—â–∏ –ø–æ –∞–π–¥–∏')
                # return 'FloodWait'
                return
            elif r == 'ValueError':
                await message.reply(self.strings('_z.nf').format(user))
                # return 'ValueError'
                return
            else:
                user = '@' + str(r)

        user_id = user
        if user not in self.zl.keys():
            return await self.fwib(message, self.strings('z.nf').format(user), user_id)

        user = self.zl[user]
        infectBefore = self.db.get(
            'BioWars', 'InfectionBefore')
        zar_do = infectBefore[user_id] if user_id in infectBefore else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        niks = self.db.get('BioWars', 'UsersNik')

        if str(user_id[1:]) in niks.keys():
            nik = niks[str(user_id[1:])]
            usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{utils.escape_html(nik)}</a>'
        else:
            usr = f'<code>{user_id}</code>'

        if cd := await self.cooldown(user_id[1:]):
            emj = time_emoji(cd)
            cd = f'| {emj} {cd}'
            r = await message.get_reply_message()

        text = self.strings('_zar.search').format(
            usr, user[0], cd, zar_do)

        if cd:
            await message.respond(
                text,
                reply_to=r if r else message,
                link_preview=False)
        else:
            await self.fwib(message, text, user_id)

    async def fwib_markups(self, message: Message, text: str, user: str) -> 'reply_markup':  # type: ignore
        """
        –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è fwib() –∏ _fwib()
        list[list[dict{}]]
        """
        return [
            [
                {
                    'text': f'–ó–∞—Ä–∞–∑–∏—Ç—å {user}',
                    'callback': self._fwib,
                    'args': (message, text, user, 0)
                },
            ],
            [
                {
                    'text': f'–ó–∞–∫—Ä—ã—Ç—å',
                    'callback': self.inline__close
                },
            ]
        ]

    async def fwib(self, message: Message, text: str, user: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è"""
        a = await self.inline.form(
            text,
            reply_markup=(await self.fwib_markups(message, text, user)),
            message=message,
            disable_security=True,
            silent=True
        )
        # –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.config['–£–¥–∞–ª–µ–Ω–∏–µ —Å–º—Å']:
            await asyncio.sleep(300)
            with contextlib.suppress(Exception):
                await a.delete()

    async def fwib_upd(self, call: InlineCall, message: Message, text: str, user: str):
        await call.edit(
            text,
            reply_markup=(await self.fwib_markups(message, text, user)),
            disable_security=False,
        )

    async def _fwib(self, call: InlineCall, message: Message, text: str, user: str, attempts: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        if str(call['from']['id']) not in self.dovs.keys():
            return await call.answer(choices(self.strings('wrong_click'))[0])

        call_upd = asyncio.create_task(
            self.fwib_upd(call, message, text, user)
        )

        if self.db.get("BioWars", "infStatus"):
            await message.reply('‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
            return await asyncio.gather(call_upd)

        if self.config['–£–¥–∞–ª–µ–Ω–∏–µ —Å–º—Å']:
            await call.delete()

        await self.autohill(message)
        await asyncio.gather(call_upd)

        self.db.set("BioWars", "infStatus", True)
        attempts = f' {attempts}' if attempts else ''

        r = await message.get_reply_message()
        if m := (
                await self.client.send_message(
                    message.peer_id,
                    f'–∑–∞—Ä–∞–∑–∏—Ç—å{attempts} {user}',
                    reply_to=r if r else message,
                    # reply_to=message,
                    link_preview=False
                )
        ).out:
            await self.save_last_infect(user)
            self.db.set("BioWars", "infStatus", False)
            # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞—Ä–∞–∑–∏—Ç—å, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –∂–µ—Ä—Ç–≤—ã
        await asyncio.gather(call_upd)
        return

    async def cooldown(self, user: str, write: bool = False) -> str:
        date_now = datetime.now()
        if write:
            self._cooldown[user] = (
                    date_now + timedelta(hours=6)).strftime(DT_FORMAT)
            return True

        if user not in self._cooldown.keys():
            return ''

        cd_time = datetime.strptime(self._cooldown[user], DT_FORMAT)
        cd_time = str(
            (cd_time - date_now)).split('.')[0]

        return '' if '-' in cd_time else cd_time

    async def autohill(self, message: Message, reset: bool = False, write: int = False) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –≤–∞–∫—Ü–∏–Ω—É –ø—Ä–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏"""
        if not self.config['–ê–≤—Ç–æ—Ö–∏–ª–ª']:
            return True

        def Reset():
            return self.set('AutoHill', '26/03/2023 09:00:00')

        date = self.get('AutoHill', '26/03/2023 09:00:00')
        fever_date = datetime.strptime(date, DT_FORMAT)

        if write is not False:
            fever_date_to = (datetime.now() + timedelta(minutes=write))

            if fever_date_to < fever_date:
                return False

            return self.set('AutoHill', fever_date_to.strftime(DT_FORMAT))

        if reset:
            return Reset()

        if datetime.now() > fever_date:
            return True

        sms = await message.reply('—Ö–∏–ª–ª...')

        while datetime.now() < fever_date:
            if re.search(
                    r'üìù –£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ä—è—á–∫–∏. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∞—Ç—å –≤–∞–∫—Ü–∏–Ω—É|'
                    r'üíâ –í–∞–∫—Ü–∏–Ω–∞ –∏–∑–ª–µ—á–∏–ª–∞ –≤–∞—Å –æ—Ç –≥–æ—Ä—è—á–∫–∏|'
                    r'üìù –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –∏—Ä–∏—Å-–∫–æ–∏–Ω–æ–≤',
                    (hill_sms := await self.message_q('!–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É', timeout=5))
            ):
                break

        Reset()
        with contextlib.suppress(FloodWaitError):
            await sms.edit(sms.text + '\n' + hill_sms)

        await asyncio.sleep(1.9)
        return True

    async def send(self, text: str, message: Message) -> None:
        """
        –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, 
        —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            sms = await asyncio.wait_for(
                self.inline.form(
                    text, message,
                    {
                        'text': '–ó–∞–∫—Ä—ã—Ç—å',
                        'callback': self.inline__close
                    },
                    disable_security=True
                ),
                timeout=(4)
            )
        except TimeoutError:
            sms = await message.reply(text)

        if not self.config['–£–¥–∞–ª–µ–Ω–∏–µ —Å–º—Å']:
            return

        with contextlib.suppress(Exception):
            await asyncio.sleep(300)
            await sms.edit('\xad')
            await sms.delete()

    async def inline__close(self, call) -> None:
        """—É–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º—ã –∏ —É–¥–∞–ª—è–µ—Ç –µ–µ"""
        if not (
                str(call['from']['id']) in self.dovs.keys()
                and self.dovs[str(call['from']['id'])] >= 3
        ):
            return await call.answer(choices(self.strings('wrong_click'))[0])

        await call.edit('\xad')
        await call.delete()

    async def return_user(self, username: str, without_resolve: bool = False) -> Union[str, int]:
        if without_resolve:
            for k, v in self.fau.items():
                if not v:
                    continue

                if v.lower() == username:
                    user_id = k
                    return user_id
            return username

        if username.lower() not in self.db.get('BioWars', 'FamousUsers').values():
            r = await self._write_user(username=username)
            if r:
                return r

        famous_users = self.db.get('BioWars', 'FamousUsers')
        for k, v in famous_users.items():
            if not v:
                continue

            if v.lower() == username:
                user_id = k
                return user_id

    async def save_nik(self, user_id: int, nik: str) -> None:
        users_nik = self.db.get('BioWars', 'UsersNik')
        users_nik[str(user_id)] = nik
        self.db.set('BioWars', 'UsersNik', users_nik)

    async def save_pref(self, user_id: int, nik: str) -> None:
        users_nik = self.db.get('BioWars', 'FamousPrefs')
        users_nik[str(user_id)] = nik
        self.db.set('BioWars', 'FamousPrefs', users_nik)

    async def _write_user(self, username: Optional[str] = None, user_id: Optional[int] = None) -> Optional[str]:
        famous_users = self.db.get('BioWars', 'FamousUsers')

        if username and user_id:
            famous_users[user_id] = username.lower()
        # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä –∞–π–¥–∏, –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if not username:
            if user_id not in famous_users.keys():
                try:
                    user = await self.client.get_entity(user_id)
                    username = user.username if user.username else None
                    famous_users[int(user.id)] = username.lower()
                # –ï—Å–ª–∏ —Ñ–ª—É–¥–≤–∞–π—Ç
                except FloodWaitError:
                    return 'FloodWait'

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                except ValueError:
                    return 'ValueError'
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Ç–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ —é–∑–µ—Ä –∞–π–¥–∏
            if username not in famous_users.values():
                try:
                    user = await self.client.get_entity(username)
                    user_id = user.id
                    famous_users[int(user_id)] = username.lower()
                # –ï—Å–ª–∏ —Ñ–ª—É–¥–≤–∞–π—Ç
                except FloodWaitError:
                    return 'FloodWait'

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                except ValueError:
                    return 'ValueError'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ
        self.db.set('BioWars', 'FamousUsers', famous_users)
        return None

    async def save_last_infect(self, user: Optional[str]) -> None:

        if user:
            user = user.replace('@', '').replace('https://t.me/', '')
            if not user.isdigit():
                user = await self.return_user(username=user)

        save = user if user else None
        self.db.set('BioWars', 'LastInfect',
                    save)

    # –ù—É–∂–µ–Ω –∫–ª–∞—Å—Å —á–∞—Ç–∞, –∞ –Ω–µ –∞–π–¥–∏ —á–∞—Ç–∞
    async def get_members_chat(self, chat: Channel) -> Union[list, str]:
        offset_user = 0  # –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ
        limit_user = 50  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑

        users = []  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞

        filter_user = ChannelParticipantsSearch('')
        try:
            while True:
                participants = await self.client(GetParticipantsRequest(
                    chat,
                    filter_user,
                    offset_user,
                    limit_user,
                    hash=0))
                if not participants.users:
                    break

                users.extend(participants.users)
                offset_user += len(participants.users)
            ids = [i.id for i in users]
            return ids

        except TypeError:
            return 'NotChat'

    async def _handler_link(self, link) -> Optional[str]:
        if link.startswith(self.strings("link_id")):
            return "@" + link.replace(self.strings("link_id"), "")
        elif link.startswith(self.strings("link_username")):
            return "@" + link.replace(self.strings("link_username"), "")
        else:
            return None

    async def number_convert(self, number: int) -> str:
        if number >= 1000000000:
            return f"{number / 1000000000:.1f}B"
        elif number >= 1000000:
            return f"{number / 1000000:.1f}M"
        elif number >= 1000:
            return f"{number / 1000:.1f}k"
        else:
            return str(number)

    async def get_pref(self) -> str:
        return self.db.get("hikka.main", "command_prefix", ".")

    async def get_lab(self, lab_raw: str, lab_args: list) -> Optional[str]:
        sms = ''
        args = ['d', 's', 'c', 'n', 'p', 'q', 'nk', 'np', 'inf', 'imm',
                'm', 'ss', 'be', 'br', 'so', 'prev', 'i', 'dis', 'f']
        lab_lines = lab_raw.splitlines()

        for arg in lab_args:
            if arg in args:
                for i in lab_lines:  # —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–∞–±—ã
                    if "üî¨ –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" in i and arg == 'd':
                        sms += f"{i}\n"

                    elif "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in i and arg == 's':
                        sms += f"{i}\n"
                    elif "–í —Å–æ—Å—Ç–∞–≤–µ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏" in i and arg == 'c':
                        sms += f"{i}\n"
                    elif "üè∑ –ò–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞:" in i and arg == 'n':
                        sms += f"{i}\n"
                    elif "üß™ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i and arg == 'p':
                        s = i.replace("üß™ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤:", "")
                        sms += f"üß™ –ü—Ä–æ–±–∏—Ä–æ–∫:{s}\n"
                    elif "üë®‚Äçüî¨ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á—ë–Ω—ã—Ö:" in i and arg == 'nk':
                        sms += f"{i}\n"
                    elif "‚è± –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω:" in i and arg == 'np':
                        s = i.replace("‚è± –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω:", "")
                        sms += f"‚è± –ù–æ–≤–∞—è{s}\n"
                    elif "ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å:" in i and arg == 'inf':
                        sms += f"{i}\n"
                    elif "üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç:" in i and arg == 'imm':
                        sms += f"{i}\n"
                    elif "‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å:" in i and arg == 'm':
                        sms += f"{i}\n"
                    elif "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:" in i and arg == 'ss':
                        sms += f"{i}\n"
                    elif "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i and arg == 'be':
                        s = i.replace("‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:", "")
                        sms += f"‚ò£Ô∏è –û–ø—ã—Ç–∞:{s}\n"
                    elif "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i and arg == 'br':
                        s = i.replace("üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:", "")
                        sms += f"üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤:{s}\n\n"
                    elif "üò∑ –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π:" in i and arg == 'so':
                        sms += f"{i}\n"
                    elif "ü•Ω –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã:" in i and arg == 'prev':
                        sms += f"{i}\n"
                    elif "ü§í –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö:" in i and arg == 'i':
                        sms += f"{i}\n"
                    elif "ü§í –°–≤–æ–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:" in i and arg == 'dis':
                        sms += f"{i}\n"
                    elif "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é" in i and arg == 'f':
                        s = i.replace(
                            "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é", "")
                        sms += f"‚ùó {s}\n"
                    elif "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë" in i and arg == 'f':
                        s = i.replace("‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë ", "")
                        sms += f"Ô∏è‚ùóÔ∏è –ì–æ—Ä—è—á–∫–∞ –µ—â—ë {s}\n"
            else:
                sms += f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: <code>{arg}</code>\n'

        return sms

    async def _generator_links(self, reply, args: str) -> Union[list, str]:
        list_args, lis = [], []
        for i in args.split(" "):
            if "-" in i:
                ot_do = i.split("-")
                try:
                    list_args.extend(
                        str(x) for x in range(int(ot_do[0]), int(ot_do[1]) + 1)
                    )
                except Exception:
                    return "wrong_ot-do"

            else:
                list_args.append(i)

        a = reply.text
        entity = reply.get_entities_text()
        users = []
        # validate_text = await self.validate_text(text)

        for e in entity:
            if isinstance(e[0], MENT):
                url = e[1]
                # if not url.startswith('@'):
                # continue

                users.append(url)

            elif isinstance(e[0], METU):
                url = await self._handler_link(e[0].url)
                users.append(url)

            elif isinstance(i[0], MEU):
                url = await self._handler_link(e[1])
                users.append(url)
        try:
            for arg in list_args:
                lis.append(users[int(arg) - 1])
        except:
            return "wrong_ot-do"

        return lis

    async def _o_generator_links(self, reply: Message) -> Union[list, str]:
        lis = []
        json = Json.loads(reply.to_json())
        try:
            for i in range(len(reply.entities)):
                try:
                    link = json["entities"][i]["url"]
                    if link.startswith("tg"):
                        users = "@" + link.split("=")[1]
                        lis.append(users)
                    elif link.startswith("https://t.me"):
                        a = "@" + str(link.split("/")[3])
                        lis.append(a)
                    else:
                        return "hueta"
                except Exception:
                    blayt = reply.raw_text[
                            json["entities"][i]["offset"]: json["entities"][i]["offset"]
                                                           + json["entities"][i]["length"]
                            ]
                    lis.append(blayt)
            return lis
        except TypeError:
            return "hueta"

    async def get_top_zhertv(self, message: Message, num_list: int) -> None:
        import operator
        # C–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä–ª–∏—Å—Ç–∞
        infList = self.db.get('NumMod', 'infList')
        a = {}
        num_list = int(num_list)

        for k, v in infList.items():
            a[k] = int(float((v[0]))) if not 'k' in v[0] else int(
                float(v[0][:-1].replace(',', '.')) * 1000)

        sort = sorted(a.items(), key=operator.itemgetter(1), reverse=True)

        sort_dict = dict(sort)

        zhertvs = dict_split(sort_dict, reverse=False)
        if num_list > len(zhertvs):
            await utils.answer(message, f'‚ùå –¢—ã —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π! ({num_list}/{len(zhertvs)})')
            return
        # ------------------------------------------------
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∂–µ—Ä—Ç–≤–∞–º–∏

        infectBefore = self.db.get(
            'BioWars', 'InfectionBefore')
        niks = self.db.get('BioWars', 'UsersNik')
        all_exps = int(sum([eval(i[0].replace(",", ".").replace(
            'k', '*1000')) for i in list(infList.values())]))
        bio_exp = await self.number_convert(all_exps)
        all_exps = '{:,}'.format(all_exps).replace(',', ' ')

        sms = f'üìì –¢–æ–ø –≤–∞—à–∏—Ö ¬´–∂–µ—Ä—Ç–≤¬ª:\n\n'
        count = 1

        for i in zhertvs[num_list - 1]:
            if not i:
                continue
            user = infList[i]
            zar_do = infectBefore[i] if i in infectBefore.keys(
            ) else '—Ö–∑'
            if i[1:] in niks.keys():
                nik = niks[str(i[1:])]
                usr = f'<a href="tg://openmessage?user_id={i[1:]}">{nik}</a>'
            else:
                usr = i
            sms += f'{count}. {usr} | –¥–æ {zar_do} | +{user[0]}  \n'
            count += 1

        sms += f'\nüìä –ò—Ç–æ–≥–æ: {len(infList)} –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö\n'
        sms += f'üß¨ –ï–∂–∞: {all_exps} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ \n'
        sms += f'üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ({num_list}/{len(zhertvs)})'
        await self.send(sms, message)

    async def get_zhertv(self, message: Message, num_list: int) -> None:
        infList = self.db.get('NumMod', 'infList')
        zhertvs = dict_split(infList)

        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if num_list > len(zhertvs):
            await utils.answer(message, f'‚ùå –¢—ã —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π! ({num_list}/{len(zhertvs)})')
            return

        infectBefore = self.db.get('BioWars', 'InfectionBefore')
        niks = self.db.get('BioWars', 'UsersNik')
        all_exps = int(sum([eval(i[0].replace(",", ".").replace(
            'k', '*1000')) for i in list(infList.values())]))
        bio_exp = await self.number_convert(all_exps)
        all_exps = '{:,}'.format(all_exps).replace(',', ' ')

        sms = f'üìì –°–ø–∏—Å–æ–∫ ¬´–∂–µ—Ä—Ç–≤¬ª: \n\n'
        count = 1

        for i in zhertvs[num_list - 1]:
            if not i:
                continue
            user = infList[i]
            zar_do = infectBefore[i] if i in infectBefore.keys(
            ) else '—Ö–∑'
            if i[1:] in niks.keys():
                nik = niks[str(i[1:])]
                usr = f'<a href="tg://openmessage?user_id={i[1:]}">{nik}</a>'
            else:
                usr = i
            sms += f'{count}. {usr} | –¥–æ {zar_do} | +{user[0]}  \n'
            count += 1

        sms += f'\nüìä –ò—Ç–æ–≥–æ: {len(infList)} –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö\n'
        sms += f'üß¨ –ï–∂–∞: {all_exps} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–∞\n'
        sms += f'üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ({num_list}/{len(zhertvs)})'
        await self.send(sms, message)

    async def get_bolezni(self, message: Message, num_list: int) -> None:
        if len((organizers := dict_split(self.bol))) < 1:
            return await message.reply('empty...')

        if len(organizers) < num_list:
            num_list = len(organizers)

        No, sms = 0, f'ü§í –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:\n'  # ({num_list}/{len(organizers)})
        for _ in filter(lambda x: x != None, organizers[num_list - 1]):
            No += 1
            name = '<a href="{}">{}</a>'.format(
                f'tg://openmessage?user_id={_}'
                if _.isdigit() else
                f'https://t.me/{_}',
                self.niks[user] if (user := await self.return_user(
                    _, without_resolve=True)) in self.niks.keys() else _
            )
            a, b, = lambda x: datetime.strptime(
                x, DT_FORMAT), lambda x: f'{x:{DT_FORMAT}}'

            date, date_to = b(await self.ch_tz(a(self.bol[_][1]))), b(await self.ch_tz((a(self.bol[_][2])))).split()[0]

            date = (
                f'—Å–µ–≥–æ–¥–Ω—è –≤ {date.split()[1][:-3]}'
                if date.split()[0] == b(datetime.now(pytz.timezone(
                    self.config['–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞']))).split()[0] else date.split()[0]
            )

            sms += f'{No}. {name} ‚Äî ‚ò¢Ô∏è +{self.bol[_][0]} | {date} –¥–æ {date_to}\n'
            sms += f'{self.bol[_][3]}\n' if self.bol[_][3] else ''

        await self.send(sms, message)

    async def ch_tz(self, datetime: datetime):
        return datetime.astimezone(
            pytz.timezone(self.config['–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞'])
        )

    async def bio(self, reply: Message, me: User) -> None:
        infList = self.db.get("NumMod", "infList")
        b = reply.raw_text.splitlines()
        niks = self.db.get('BioWars', 'UsersNik')
        chat_flag, lines_to_pop = isbio(reply.raw_text)
        if chat_flag:
            for _ in range(lines_to_pop):
                b.pop(0)
        else:
            b.pop(0)
        sms = ''
        exps = []
        # Add exp
        for i in b:
            try:
                a = i.split('|')
                if not chat_flag:
                    continue
                exps.append(a[-2])
            except:
                pass

        json = Json.loads(reply.to_json())

        if len(exps) == 0:
            count = 1

            for i in get_ne_pridumal(reply.text, at=True):

                if not i[1:].isdigit():
                    r = await self.return_user(i[1:])
                    if r == 'FloodWait':
                        sms += f'{count}. {i} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –æ —é–∑.:–§–ª—É–¥–≤–µ–π—Ç \n'
                        count += 1

                        continue
                    elif r == 'ValueError':
                        sms += f'{count}. {i} | ‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! \n'
                        count += 1

                        continue
                    else:
                        i = '@' + str(r)

                if str(i[1:]) == str(me.id):
                    name = me.first_name
                    sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a>\n'
                    count += 1
                    continue

                if str(i[1:]) in niks:
                    nik = niks[str(i[1:])]
                    name = f"<a href='tg://openmessage?user_id={i[1:]}'>{nik}</a>"
                else:
                    name = i

                if cd := await self.cooldown(i[1:]):
                    emj = time_emoji(cd)
                    cd_ = f'| {emj} {cd}'
                else:
                    cd_ = ''

                exp = infList[i][0] if i in infList else None

                if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                    exp = f'<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> {exp} –æ–ø—ã—Ç–∞' if exp else 'üÜï –ù–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞'
                    sms += f'{count}. {name} | {exp} {cd_}\n'
                else:
                    exp = f'<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> {exp} –æ–ø—ã—Ç–∞' if exp else 'üÜï –ù–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞'
                    sms += f'{count}. {name} | {exp} {cd_}\n'
                count += 1
            return sms

        else:
            count = 1
            metu_counter = 0
            for i in range(0, len(b)):
                try:
                    exp = exps[i].replace(",", ".")
                    s = exp.find(' –æ–ø—ã—Ç')
                    exp = exp[1:s].replace(' ', '')
                    if 'k' in exp:
                        exp_count = float(exp[:-1])
                        if exp_count < 10.0:
                            exp = int(round(exp_count * 100, 0))

                        else:
                            exp_count = float(exp[:-1])
                            exp_count = int(exp_count)
                            exp = str(exp_count / 10) + 'k'

                    else:
                        exp_count = int(exp)
                        exp = exp_count // 10

                except:
                    exp = None

                while "url" not in list(json["entities"][metu_counter].keys()):
                    metu_counter += 1

                link = json["entities"][metu_counter]["url"]
                metu_counter += 1
                bla = []
                if link.startswith('tg'):
                    for i in link.split('='):
                        bla.append(i)

                    if str(bla[1]) == str(me.id):
                        name = me.first_name
                        sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a> | {exp} –æ–ø—ã—Ç–∞ \n'
                        count += 1
                        continue

                    user_id = bla[1]
                    if '@' + str(user_id) in infList:
                        if chat_flag:
                            user = infList['@' + str(user_id)]
                            usr_exp = user[0].replace(',', '.')
                            exp_count = str(exp)

                            if usr_exp[-1] == 'k':
                                usr_exp = float(usr_exp[:-1]) * 1000

                            if exp_count[-1] == 'k':
                                exp_count = float(exp_count[:-1]) * 1000

                            result = int(float(exp_count) - float(usr_exp))

                            # abc.append(str(result))

                            if result > 0:
                                if result < 1000:
                                    result = f'(‚úÖ +{str(result)})'
                                else:
                                    result = f'(‚úÖ +{str(round(float(result) / 1000, 1))}k)'
                            elif result == 0:
                                result = f' üü∞ [{str(result)}]'

                            else:
                                if result > -1000:
                                    result = f'(‚ùå {str(result)})'
                                else:
                                    result = f'(‚ùå {str(round(float(result) / 1000, 1))}k)'

                            if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                                zh = f" {result}"
                            else:
                                zh = f"{user[0]} –æ–ø—ã—Ç–∞ {result}"
                        else:
                            zh = f"<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> (+{infList['@' + str(user_id)][0]})"
                    else:
                        if chat_flag:  # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Ç –∏ –∂–µ—Ä—Ç–≤—ã –Ω–µ—Ç –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ
                            exp_count1 = str(exp)
                            if exp_count1[-1] == 'k':
                                exp_count1 = float(exp_count1[:-1]) * 1000

                            if round(float(exp_count1), 1) < 10000.0:  # +{}–∫
                                zh = f' üÜï +{round(float(exp_count1) / 1000, 1)}k'
                            else:  # + {}
                                zh = f' üÜï +{round(float(exp_count1) / 1000, 1)}k'
                        else:
                            zh = ''

                    if cd := await self.cooldown(str(bla[1])):
                        zh += f' {time_emoji(cd)}'

                    try:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        # sms += f'{str(count)}.\n {name}\n {zh}\n {exp} –æ–ø—ã—Ç–∞ \n'

                        if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                            sms += f'{count}. {name} | {zh} \n'
                        else:
                            sms += f'{str(count)}. {name} | {zh} \n'

                    except:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        # sms += f'{str(count)}.\n {name}\n {zh}\n {exp} –æ–ø—ã—Ç–∞ \n'

                        if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                            sms += f'{count}. {name}  |{zh} \n'
                        else:
                            sms += f'{str(count)}. {name} | {zh} \n'

                count += 1
            return sms

        # -------------------------------------------------------------------------------------------------------------------------#
        return
        infList = self.db.get("NumMod", "infList")
        b = reply.raw_text.splitlines()
        niks = self.db.get('BioWars', 'UsersNik')
        chat_flag = True if 'üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô' in b[0] or 'üè¢ –£–ß–ê–°–¢–ù–ò–ö–ò –ö–û–†–ü–û–†–ê–¶–ò–ò' in b[0] else False
        b.pop(0)
        sms = ''
        exps = []
        # Add exp
        for i in b:
            try:
                a = i.split('|')
                if not chat_flag:
                    continue
                exps.append(a[-2])
            except:
                pass

        json = Json.loads(reply.to_json())

        if len(exps) == 0:

            entity = reply.get_entities_text()
            users = []

            for e in entity:
                if isinstance(e[0], MENT):
                    url = e[1]
                    users.append(url)

                elif isinstance(e[0], METU):
                    url = await self._handler_link(e[0].url)
                    users.append(url)

                elif isinstance(e[0], MEU):
                    url = await self._handler_link(e[1])
                    users.append(url)

            count = 1

            for i in users:

                if not i[1:].isdigit():
                    r = await self.return_user(i[1:])
                    if r == 'FloodWait':
                        sms += f'{count}. {i} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –æ —é–∑.:–§–ª—É–¥–≤–µ–π—Ç \n'
                        count += 1

                        continue
                    elif r == 'ValueError':
                        sms += f'{count}. {i} | ‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! \n'
                        count += 1

                        continue
                    else:
                        i = '@' + str(r)

                if str(i[1:]) == str(me.id):
                    name = me.first_name
                    sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a>\n'
                    count += 1
                    continue

                if str(i[1:]) in niks:
                    nik = niks[str(i[1:])]
                    name = f"<a href='tg://openmessage?user_id={i[1:]}'>{nik}</a>"
                else:
                    name = i

                if cd := await self.cooldown(i[1:]):
                    emj = time_emoji(cd)
                    cd_ = f'| {emj} {cd}'
                else:
                    cd_ = ''

                exp = infList[i][0] if i in infList else None

                if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                    exp = f'<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> {exp} –æ–ø—ã—Ç–∞' if exp else 'üÜï –ù–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞'
                    sms += f'{count}. {name} | {exp} | {cd_}\n'
                else:
                    exp = f'<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> {exp} –æ–ø—ã—Ç–∞' if exp else 'üÜï –ù–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞'
                    sms += f'{count}. {name} | {exp} | {cd_}\n'
                count += 1
            return sms

        else:
            count = 1
            for i in range(0, len(b)):
                try:
                    exp = exps[i].replace(",", ".")
                    s = exp.find(' –æ–ø—ã—Ç')
                    exp = exp[1:s].replace(' ', '')
                    if 'k' in exp:
                        exp_count = float(exp[:-1])
                        if exp_count < 10.0:
                            exp = int(round(exp_count * 100, 0))

                        else:
                            exp_count = float(exp[:-1])
                            exp_count = int(exp_count)
                            exp = str(exp_count / 10) + 'k'

                    else:
                        exp_count = int(exp)
                        exp = exp_count // 10

                except:
                    exp = None

                link = json["entities"][i]["url"]
                bla = []
                if link.startswith('tg'):
                    for i in link.split('='):
                        bla.append(i)

                    if str(bla[1]) == str(me.id):
                        name = me.first_name
                        sms += f'{str(count)}. üîÜ <a href= "tg://openmessage?user_id={me.id}">{name}</a> | {exp} –æ–ø—ã—Ç–∞ \n'
                        count += 1
                        continue

                    user_id = bla[1]
                    if '@' + str(user_id) in infList:
                        if chat_flag:
                            user = infList['@' + str(user_id)]
                            usr_exp = user[0].replace(',', '.')
                            exp_count = str(exp)

                            if usr_exp[-1] == 'k':
                                usr_exp = float(usr_exp[:-1]) * 1000

                            if exp_count[-1] == 'k':
                                exp_count = float(exp_count[:-1]) * 1000

                            result = int(float(exp_count) - float(usr_exp))

                            # abc.append(str(result))

                            if result > 0:
                                if result < 1000:
                                    result = f'(‚úÖ +{str(result)})'
                                else:
                                    result = f'(‚úÖ +{str(round(float(result) / 1000, 1))}k)'
                            elif result == 0:
                                result = f' üü∞ [{str(result)}]'

                            else:
                                if result > -1000:
                                    result = f'(‚ùå {str(result)})'
                                else:
                                    result = f'(‚ùå {str(round(float(result) / 1000, 1))}k)'

                            if not self.config['–í–∫–ª/–í—ã–∫–ª –ë–∏–æ']:
                                zh = f" {result}"
                            else:
                                zh = f"{user[0]} –æ–ø—ã—Ç–∞ {result}"
                        else:
                            zh = f"<emoji document_id=5280697968725340044>‚ò¢Ô∏è</emoji> (+{infList['@' + str(user_id)][0]})"
                    else:
                        if chat_flag:  # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Ç –∏ –∂–µ—Ä—Ç–≤—ã –Ω–µ—Ç –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ
                            exp_count1 = str(exp)
                            if exp_count1[-1] == 'k':
                                exp_count1 = float(exp_count1[:-1]) * 1000

                            if round(float(exp_count1), 1) < 10000.0:  # +{}–∫
                                zh = f' üÜï +{round(float(exp_count1) / 1000, 1)}k'
                            else:  # + {}
                                zh = f' üÜï +{round(float(exp_count1) / 1000, 1)}k'
                        else:
                            zh = ''

                    if cd := await self.cooldown(str(bla[1])):
                        zh += f' {time_emoji(cd)}'

                    try:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        # sms += f'{str(count)}.\n {name}\n {zh}\n {exp} –æ–ø—ã—Ç–∞ \n'

                        if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                            sms += f'{count}. {name} | {zh} \n'
                        else:
                            sms += f'{str(count)}. {name} | {zh} \n'

                    except:
                        if str(bla[1]) in niks:
                            nik = niks[str(bla[1])]
                            name = f"<a href='tg://openmessage?user_id={bla[1]}'>{nik}</a>"
                        else:
                            name = '@' + str(bla[1])

                        exp = f'| {exp}'
                        # sms += f'{str(count)}.\n {name}\n {zh}\n {exp} –æ–ø—ã—Ç–∞ \n'

                        if not self.config['–†–µ–∂–∏–º –±–∏–æ']:
                            sms += f'{count}. {name} | {zh} \n'
                        else:
                            sms += f'{str(count)}. {name} | {zh} \n'

                count += 1
            return sms

    async def message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
            self,
            text: str,
            bot_id: int = 5443619563,
            mark_read: bool = True,
            delete: bool = True,
            timeout: int = None,
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(bot_id, exclusive=False) as conv:
            await conv.cancel_all()

        async with self.client.conversation(bot_id, exclusive=False, timeout=timeout) as conv:
            try:
                a = self.get('messages_for_clear', [])

                msg = await conv.send_message(text)
                a.append([msg.chat_id, msg.id])

                response = await conv.get_response()
                a.append([response.chat_id, response.id])

                if mark_read:
                    await conv.mark_read()
                if delete:
                    await msg.delete()
                    await response.delete()
                return response.text
            except TimeoutError:
                return "Timeout"

    # -----------------------Commands in watcher----------

    async def z_command(self, message: Message, args_raw: str, text: str, reply: Message) -> None:
        if self.db.get("BioWars", "infStatus"):
            await message.reply('‚ö†Ô∏è –î—Ä—É–≥–∏–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã')
            return

        if not args_raw and not reply:  # .z - –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            text = self.strings("no.args_and_reply")
            await utils.answer(message, text)
            return

        if (reply and not args_raw):
            rt = reply.text
            entity = reply.get_entities_text()

            if rt.startswith(r"üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏") or rt.startswith(
                    r"üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –í–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"):
                user = await self._handler_link(entity[1][0].url)

            elif '<a href="tg://user?id=' in rt:
                href1 = rt.find('<a href="tg://user?id=') + \
                        len('<a href="tg://user?id=')
                href2 = rt.rfind('">')

                user = '@' + rt[href1:href2]

            elif '@' in rt:
                for i in entity:
                    if i[1].startswith('@'):
                        user = i[1]
                        break

            elif '<a href="tg://openmessage?user_id=' in rt:
                href1 = rt.find('tg://openmessage?user_id=') + \
                        len('tg://openmessage?user_id=')
                href2 = rt.find('">')

                user = '@' + rt[href1:href2]

            elif '<a href="https://t.me/' in rt:
                href1 = rt.find('<a href="https://t.me/') + \
                        len('<a href="https://t.me/')
                href2 = rt.find('">')
                user = '@' + rt[href1:href2]

            else:
                user = '@' + str(reply.sender_id)

            await self.autohill(message)
            await message.reply(f'–∑–∞—Ä–∞–∑–∏—Ç—å {user}')
            await self.save_last_infect(user)

            return

        if reply and args_raw == '–æ':

            ids = await self._o_generator_links(reply)
            self.db.set("BioWars", "infStatus", True)

            await asyncio.sleep(0.3)
            await message.client.send_message(
                message.peer_id, f"–∑–∞—Ä–∞–∑–∏—Ç—å {ids[0]}", reply_to=reply
            )

            for i in ids[1:]:
                interval = self.db.get("BioWars", "infInterval")
                await asyncio.sleep(interval)
                await message.client.send_message(
                    message.peer_id, f"–∑–∞—Ä–∞–∑–∏—Ç—å {i}", reply_to=reply
                )
            else:
                await asyncio.sleep(1)
                await message.reply('‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω—ã')

            self.db.set("BioWars", "infStatus", False)
            return

        if reply and args_raw:
            r = await self._generator_links(reply, args_raw)
            if r == "wrong_ot-do":
                await message.reply('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç-–¥–æ')
                return

            users = r

            if len(users) == 1:

                self.db.set("BioWars", "infStatus", True)
                await message.reply(f"–∑–∞—Ä–∞–∑–∏—Ç—å {users[0]}")

                await self.save_last_infect(users[0])
                self.db.set("BioWars", "infStatus", False)

            else:
                self.db.set("BioWars", "infStatus", True)
                await asyncio.sleep(0.3)
                await message.reply(f"–∑–∞—Ä–∞–∑–∏—Ç—å {users[0]}", )

                for infect in users[1:]:
                    if self.db.get("BioWars", "infStatus"):
                        interval = self.db.get("BioWars", "infInterval", 4)
                        await self.autohill(message)
                        interval = self.db.get("BioWars", "infInterval", 4)
                        await asyncio.sleep(interval)
                        await self.save_last_infect(infect)
                        await message.reply(f"–∑–∞—Ä–∞–∑–∏—Ç—å {infect}")
                    else:
                        return
                else:
                    await asyncio.sleep(1)
                    await message.reply('‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω—ã')

                self.db.set("BioWars", "infStatus", False)
                return

    async def id_command(self, message: Message, args: str, reply) -> None:
        if not args and not reply:
            user = await self.client.get_me()

        elif reply:
            user_id = reply.sender_id
            user = await message.client.get_entity(user_id)

        elif args.startswith("@"):
            if args[1:].isdigit():
                user_id = int(args[1:])
            else:
                user_id = args[1:]

            user = await message.client.get_entity(user_id)
        else:
            return

        username = user.username if user.username else "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
        await self.write_user(username.lower(), user.id)
        await self.client.send_message(
            message.chat_id,
            self.strings("get_user").format(
                user.id, user.first_name, username, user.id
            ),
            reply_to=reply,
        )

    async def ids_command(self, message: Message, args_raw: str, reply) -> None:
        if not reply:
            await utils.answer(message, self.strings("no.reply"))
            return
        ids = (
            await self._generator_links(reply, args_raw)
            if args_raw
            else await self._o_generator_links(reply)
        )
        for i in ids:
            await message.client.send_message(
                message.peer_id, f".–∏–¥ {i}", reply_to=reply
            )
            await asyncio.sleep(3.5)
        else:
            await message.respond("‚úÖ –í—Å–µ –∞–π–¥–∏ –ø—Ä–æ—á–µ–∫–∞–Ω—ã")

    async def dov_command(
            self, message: Message, args_list: list, args_raw: str, reply
    ) -> None:

        numfilter = self.db.get("NumMod", "numfilter")
        biowars_dovs = self.db.get("BioWars", "DovUsers")
        pref = await self.get_pref()

        if not args_raw and not reply:
            status_emj = "‚ñ∂Ô∏è" if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] else "‚è∏"
            status = "–í–∫–ª—é—á–µ–Ω–æ" if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] else "–í—ã–∫–ª—é—á–µ–Ω–æ"
            nik = numfilter["filter"] if numfilter["filter"] else "–ù–µ   —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            text_message = self.strings("dov").format(
                pref, nik, status_emj, status
            )
            await self.send(text_message, message)
            return

        if args_list[0].lower() == "set":
            # –ï—Å–ª–∏ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ç–æ —Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ 3 –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ 3 —Ç–∏–ø–∞ –∏–Ω—Ç —Å—Ç–∞–≤–∏–º —É—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –Ω–µ–º

            level = None
            data = args_list[1:]
            logging.info(f'{data}')
            if reply:
                user_id = str(reply.sender_id)
                if data:
                    level = int(data[0]) if data[0].isdigit() else None
                if not level:
                    level = None

            elif re.fullmatch(r"@\d+", data[0]):
                user_id = data[0].replace('@', '')
                # try:
                if len(data) >= 2:
                    level = int(data[1]) if data[1].isdigit() else None
                if not level:
                    level = None
                # except Exception:
                # await utils.answer(message, self.strings('args_error'))
                # return
            else:
                await utils.answer(message, self.strings('args_error'))
                return
            # –Ø –∑–Ω–∞—é —á—Ç–æ in —Ä–∞—Å–ø–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ user_id

            if level and user_id in biowars_dovs.keys():
                old_level = biowars_dovs[user_id]
                biowars_dovs[user_id] = level
                self.db.set("BioWars", "DovUsers", biowars_dovs)
                await utils.answer(message, self.strings('dov.edit_level').format(user_id, old_level, level))

                return

            elif str(user_id) in biowars_dovs.keys():
                numfilter["users"].remove(str(user_id))
                biowars_dovs.pop(user_id)
                self.db.set("BioWars", "DovUsers", biowars_dovs)
                await utils.answer(message, self.strings("dov.rem").format(user_id))
                return
            else:
                logging.info(
                    f'{user_id} - {level}')
                level = level if level else 1
                numfilter["users"].append(user_id)
                biowars_dovs[user_id] = level
                text_message = self.strings("dov.add").format(user_id, level)
                self.db.set("BioWars", "DovUsers", biowars_dovs)

                await utils.answer(message, text_message)
                return

        elif args_list[0].lower() == "nik":
            if args_list[1]:
                if len(args_list[1]) > 8 or len(args_list) >= 3:
                    await utils.answer(message, self.strings("len_error"))
                    return

                old_nik = numfilter["filter"] if numfilter["filter"] else "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
                nik = args_list[1]
                numfilter['filter'] = nik
                self.db.set("NumMod", "numfilter", numfilter)
                await utils.answer(message,
                                   self.strings("nick.rename").format(
                                       old_nik, nik)
                                   )

            else:
                await utils.aswer('–ö–∞–∫–æ–π –Ω–∏–∫ –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å?')
                return

        elif args_list[0].lower() == "dovs":
            niks = self.db.get('BioWars', 'UsersNik')

            dovs_users = ''

            if len(args_list) > 1 and args_list[1].lower() == 'chat':
                r = await self.get_members_chat(message.chat)
                if r == 'NotChat':
                    await utils.answer(message, '–≠—Ç–æ –Ω–µ —á–∞—Ç')
                    return
                else:
                    users = r
                i = 1
                for user in users:
                    if str(user) in biowars_dovs.keys():
                        level = biowars_dovs[str(user)]

                        level = '‚ùóÔ∏è (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)' if level == 4 else f'{level} —É—Ä'

                        if str(user) in niks.keys():
                            nik = niks[str(user)]
                            usr = f'<a href="tg://openmessage?user_id={user}">{nik}</a>'
                        else:
                            usr = f'<code>@{user}</code>'

                        dovs_users += f'{i}) {usr} - {level} \n'
                        i += 1
                dovs_users = dovs_users if dovs_users else '–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

                await self.send(self.strings('dov.users.chat').format(dovs_users), message)
                return
            for i, (user_id, level) in enumerate(biowars_dovs.items(), start=1):

                level = '‚ùóÔ∏è (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)' if level == 4 else f'{level} —É—Ä'

                if str(user_id) in niks.keys():
                    nik = niks[str(user_id)]
                    usr = f'<a href="tg://openmessage?user_id={user_id}">{nik}</a>'
                else:
                    usr = f'<code>@{user_id}</code>'

                dovs_users += f'{i}) {usr} - {level} \n'
            await self.send(self.strings('dov.users').format(dovs_users), message)
            return

        elif args_list[0].lower() == "prefs":
            prefs_users = self.db.get('BioWars', 'FamousPrefs')
            niks = self.db.get('BioWars', 'UsersNik')
            prefs = ''
            if len(args_list) > 1 and args_list[1].lower() == 'chat':
                r = await self.get_members_chat(message.chat)
                if r == 'NotChat':
                    await utils.answer(message, '–≠—Ç–æ –Ω–µ —á–∞—Ç')
                    return
                else:
                    users = r
                i = 1
                for user in users:
                    if str(user) in prefs_users.keys():
                        pref = prefs_users[str(user)]

                        if str(user) in niks.keys():
                            nik = niks[str(user)]
                            usr = f'<a href="tg://openmessage?user_id={user}">{nik}</a>'
                        else:
                            usr = f'<code>@{user}</code>'

                        prefs += f'{i}) {usr} | {pref} \n'
                        i += 1
                prefs = prefs if prefs else '–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

                await self.send(self.strings('dov.prefs.chat').format(prefs), message)
                return

            for i, (user_id, pref) in enumerate(prefs_users.items(), start=1):
                if str(user_id) in niks.keys():
                    nik = niks[str(user_id)]
                    usr = f'<a href="tg://openmessage?user_id={user_id[1:]}">{nik}</a>'
                else:
                    usr = f'<code>@{user_id}</code>'
                prefs += f'{i}) {usr} | {pref} \n'

            prefs = prefs if prefs else '–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'

            await self.send(self.strings('dov.prefs').format(prefs), message)
            return

        elif args_list[0].lower() == "st":
            status = self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"]
            if status:
                self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] = False
                await utils.answer(message, self.strings("dov.status.   False"))
            else:
                self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] = True
                await utils.answer(message, self.strings("dov.status.True"))

    async def bio_command(self, message: Message, reply: Message, me) -> None:
        if reply.text.startswith('üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:'):
            sms = choices(self.strings('messages.biotop'))[0] + '\n'
        else:
            sms = choices(self.strings('messages.misc'))[0] + '\n'

        sms += await self.bio(reply, me)

        await self.send(sms, message)

    async def nik_command(self, message: Message, args_list: list, args_raw: str) -> None:

        user_id = args_list[0].replace('@', '')
        user_nikname = ' '.join(args_list[1:])
        await self.save_nik(user_id, user_nikname)
        await utils.answer(message, self.strings('edit_nik').format(user_id, user_nikname))

    async def pref_command(self, message: Message, args_list: list) -> None:
        user_id = args_list[0].replace('@', '')
        user_pref = ' '.join(args_list[1:])
        await self.save_pref(user_id, user_pref)
        await utils.answer(message, self.strings('edit_pref').format(user_pref, user_id))

    # -----------------------Commands-------------------

    async def –ø–æ–º–æ—â—åcmd(self, message: Message) -> None:
        """–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é"""
        args_raw = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        famous_users = self.db.get('BioWars', 'FamousUsers')
        dov_users = self.db.get("BioWars", "DovUsers")
        if not args_raw:
            pref = await self.get_pref()
            commands = ""
            comm = self.strings("—Åommands")
            for com, desc in comm.items():
                commands += f"‚ñ´Ô∏è <code>{pref}{com}</code> {desc} \n"
                text = self.strings("bio.commands").format(
                    pref, commands)

        elif args_raw.lower() == "–∑–∞—Ä–ª–∏—Å—Ç":
            text = self.strings("bio.zar").format()
        elif args_raw.lower() == "–¥–æ–≤–µ—Ä–∫–∞":
            text = self.strings("bio.dov").format()
        elif args_raw.lower() == '–¥–æ–≤–µ—Ä–∫–∞ -—É—Ä–æ–≤–Ω–∏':
            text = self.strings("bio.dov.levels")
        elif args_raw.lower() == '–∏–Ω—Ñ–æ':
            exps = int(sum([eval(i[0].replace(",", ".").replace(
                'k', '*1000')) for i in list(infList.values())]))
            text = self.strings("bio.info").format(
                len(infList.keys()),
                '{:,}'.format(exps).replace(',', ' '),
                len(famous_users.keys()),
                len(dov_users.keys())
            )

        else:
            await utils.answer(message, "–ß—Ç–æ —Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–∞–∫")
            return
        await self.send(text, message)
        return

    @loader.watcher(only_messages=True)
    async def autohill__diseases(self, message: Message):
        if not (text := message.text):
            return

        me = await self.client.get_me()

        if (sender := message.from_id) == me.id:
            for _ in iris._prefs:
                if (
                        (txt := message.raw_text.lower()) == '–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É'
                        or txt.splitlines()[0] == _ + '–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É'
                ):
                    return await self.autohill(message, reset=True)

        if not (reg := re.search(
                r'‚ò†Ô∏è –ì–æ—Ä—è—á–∫–∞ –Ω–∞ (\d+) –º–∏–Ω—É—Ç[—ã]*\n'
                r'ü§í –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ (\d+) –¥.+',
                text
        )
        ):
            return

        letal = [int(reg.group(1)), int(reg.group(2))]

        if reg := re.search(
                r'–ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é .+tg://user\?id=(\d+)', text
        ):
            if int(reg.group(1)) == me.id:
                await self.autohill(message, write=letal[0])

        if not (reg := re.search(
                r'<a href="(https://t\.me/([a-zA-Z]{1}[a-zA-Z0-9_]{3,31})|tg://openmessage\?user_id=(\d+))">.+ '
                r'–ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é ((–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º)|–ø–∞—Ç–æ–≥–µ–Ω–æ–º (¬´.+¬ª)) <a href="tg://user\?id=(\d+)">',
                text
        )
        ):
            return

        if int(reg.group(7)) != me.id or sender not in iris.bots:
            return

        org_inf = reg.group(2) if reg.group(2) else reg.group(3)
        if org_inf in self.bol.keys():
            del self.bol[org_inf]

        # –∏–¥/—é–∑–µ—Ä = str: –æ–ø—ã—Ç, str: –¥–∞—Ç–∞, str: –¥–∞—Ç–∞ –¥–æ, str/None: –∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞
        self.bol[org_inf] = (
            [
                str(_exp(re.search(r'‚ò£Ô∏è \+(.+) –±–∏–æ-–æ–ø—ã—Ç–∞', text).group(1))),
                f'{datetime.now():{DT_FORMAT}}',
                f'{(datetime.now() + timedelta(days=letal[1])):{DT_FORMAT}}',
                reg.group(6)
            ]
        )

    @loader.watcher(only_messages=True)
    async def append_famous(self, message: Message):
        """—Ä–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑—É –Ω–∏–∫–æ–≤ –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
        if (
                not (text := message.text)
                or not (raw_text := message.raw_text)
        ):
            return

        by_iris = message.from_id in iris.bots
        try:
            reply = await message.get_reply_message()
        except:
            reply = None

        if choices([True, False], weights=[5, 95])[0]:
            sender = await message.get_sender()

            if sender and isinstance(sender, User):
                if sender.id and sender.username:
                    # logger.warning(f'sender.id and sender.username "{sender.id}", "{sender.username}"')

                    self.fau[str(sender.id)] = sender.username.lower()

                if sender.id and sender.first_name:
                    # logger.warning(f'sender.id and sender.first_name "{sender.id}", "{sender.first_name}"')

                    if str(sender.id) not in self.niks.keys():
                        self.niks[str(sender.id)] = repair_text(sender.first_name)

        if re.search(r'–ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é', text) and by_iris:
            for _ in range(len((_text := text))):
                if reg := re.search(r'<a href="tg://user\?id=(\d+)">(.+)</a>', _text):
                    id, nik = reg.group(1), repair_text(reg.group(2))
                    _text = _text.replace(reg.group(0), '')

                elif reg := re.search(r'<a href="tg://openmessage\?user_id=(\d+)">(.+)</a>', _text):
                    id, nik = reg.group(1), repair_text(reg.group(2))
                    _text = _text.replace(reg.group(0), '')

                else:
                    break

                # logger.warning(f'r"–ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é" and by_iris "{id}", "{nik}"')

                if id not in self.niks.keys():
                    self.niks[id] = repair_text(nik)

        if reg := re.search(
                r'üí¢ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–∞–∑–∏—Ç—å (.+) –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å|'
                r'ü•Ω –ò–º–º—É–Ω–∏—Ç–µ—Ç –æ–±—ä–µ–∫—Ç–∞ ¬´(.+)¬ª –æ–∫–∞–∑–∞–ª—Å—è —Å—Ç–æ–π–∫–∏–º –∫ –≤–∞—à–µ–º—É –ø–∞—Ç–æ–≥–µ–Ω—É|'
                r'ü¶† .+ –ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º (.+)|'
                r'ü¶† .+ –ø–æ–¥–≤–µ—Ä–≥[–ª–∞]* –∑–∞—Ä–∞–∂–µ–Ω–∏—é –ø–∞—Ç–æ–≥–µ–Ω–æ–º ¬´.+¬ª (.+)',
                raw_text
        ):
            if not reply or not by_iris:
                return

            if not (user := re.search(r'(.+|)–∑–∞—Ä–∞–∑–∏—Ç—å @(\d+)', reply.raw_text.splitlines()[0])):
                return

            nik = ...
            for _ in range(1, 4):
                if reg.group(_) is not None:
                    nik = repair_text(reg.group(_))
                    break

            if nik is ...:
                return

            # logger.warning(f'—Ä–µ–≥ "{user.group(2)}", "{nik}"')

            if user.group(2) not in self.niks.keys():
                self.niks[user.group(2)] = nik

        return

        # –ß–∞—Ç –∞–π–¥–∏ –ª–æ–∫–¥–∞—É–Ω–∞  –∏ –Ω–µ —Ç–æ–ª—å–∫–æ
        if message.chat_id in iris.chats:
            return

        if re.fullmatch(r"–∂–¥\s@\d{3,12}.{,10}", text, flags=re.ASCII):
            if str(sender.id) != (me.id):
                return

        elif re.fullmatch(r"–∂–ª\s@\d{3,12}", text, flags=re.ASCII):
            if str(sender.id) != str(me.id):
                return

    @loader.watcher(only_messages=True)
    async def autosave_watcher(self, message: Message):
        """–í–∞—Ç—á–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–µ–π–≤–∞"""
        if (
                not message.text
                or not self.config["–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤"]
        ):
            return
        # –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞
        try:
            reply = await message.get_reply_message()
        except:
            reply = None
        text = message.text
        me = await self.client.get_me()
        raw_text = message.raw_text
        sndr_id = message.sender_id
        infList = self.db.get("NumMod", "infList")
        msg_splitlines_1 = message.raw_text.splitlines()[0] if text else ''

        # –û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–≤—Ç–æ–∑–∞–ø–∏—Å–µ –∂–µ—Ä—Ç–≤
        # –ë–µ—Ä–µ–º –∞–π–¥–∏/—é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ (–≤ –±–¥ –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –∞–π–¥–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ)
        if mes := re.fullmatch(r'(/–∑–∞—Ä–∞–∑–∏—Ç—å|–∑–∞—Ä–∞–∑–∏—Ç—å) (?P<lvl>[1-9]?[0]?\s)?((https?://)?t\.me/|@)([0-9a-z_A-Z]+)',
                               msg_splitlines_1.lower()):
            if str(me.id) != str(sndr_id):
                return
            user = mes.group(5)
            await self.save_last_infect(user)
            return

        if re.search(r'(/–∑–∞—Ä–∞–∑–∏—Ç—å|–∑–∞—Ä–∞–∑–∏—Ç—å) (?P<lvl>[1-9]?[0]?\s)?(—Ä–∞–≤–Ω–æ–≥–æ|—Å–ª–∞–±–µ–µ|—Å–∏–ª—å–Ω–µ–µ|—Ä|=|-|\+)',
                     msg_splitlines_1.lower()):
            if str(me.id) != str(sndr_id):
                return
            user = None
            await self.save_last_infect(user)
            return

        # –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ç—É –±–µ—Ä–µ–º –µ–µ –∏–∑ –±–¥
        if (
                '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in text
                or '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in text
        ):
            if not '‚ò£' in text or message.text.startswith('üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'):
                return
            get_me = me
            vremya = datetime.now(pytz.timezone(
                self.config["–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞"]))
            msg_text = text
            split_text = text.splitlines()
            split_text_raw = message.raw_text.splitlines()

            if sndr_id not in iris.bots:
                return

            line = split_text[3] if "üóì –û—Ç—á—ë—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:" in msg_text else split_text[0]
            line_raw = split_text_raw[3] if "üóì –û—Ç—á—ë—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:" in msg_text else split_text_raw[0]
            lines = line.split("–∑–∞—Ä–∞–∂–µ–Ω–∏—é", maxsplit=2)

            """–ø—Ä–æ–≤–µ—Ä—è–ª–∫–∞ –Ω–∞ –∏–¥/—é–∑–µ—Ä"""
            if '<a href="https://t.me/' in lines[0]:
                _user = lines[0].split("/")
                _user = _user[3].split('">')[0]
                if me.username:
                    if _user != get_me.username.lower():
                        return
                else:
                    return
            elif '<a href="tg://' in lines[0]:
                user_id = lines[0].split("=")
                user_id = user_id[2].split('">')[0]
                if int(user_id) != me.id:
                    return
            else:
                return

            reg = r"""ü§í –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ (\d+) –¥–Ω[—è–µ–π]{,2}
‚ò£Ô∏è +(.*) –±–∏–æ-–æ–ø—ã—Ç–∞"""

            s = re.compile(reg)
            info = s.search(msg_text)

            letal = int(info.group(1))
            count = info.group(2).replace('+', '')

            try:
                x = msg_text.index('user?id=') + 8
                user = msg_text[x:].split('"', maxsplit=1)[0]
                self.db.set('BioWars', 'LastInfect', None)

            except ValueError:  # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂–µ—Ä—Ç–≤—É —Ç–æ –±–µ—Ä–µ–º –µ–µ –∏–∑ –±–¥
                # –ï—Å–ª–∏ –≤ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π, —Ç–æ –±–µ—Ä–µ–º –∞–π–¥–∏ –∏–∑ —Ä–µ–ø–ª–∞—è, –∏–Ω–∞—á–µ –∏–∑ –±–¥
                if reply:
                    t = reply.raw_text.splitlines()[0]
                    if '@' in t:
                        s = t.find('@')
                        user = t[s:].replace('@', '')
                    else:
                        s = t.find('https://t.me/')
                        user = t[s:].replace('https://t.me/', '')

                    if not user.isdigit():
                        user = await self.return_user(username=user)

                    self.db.set('BioWars', 'LastInfect', None)

                else:
                    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–º
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¢—Ä—É(—Ç–æ–µ—Å—Ç—å –µ—â–µ –Ω–µ –∑–∞—Ä–∞–∂–ª–∏ –µ–≥–æ)
                    # –¢–æ –±–µ—Ä–µ–º –µ–≥–æ –∞–π–¥–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –¥–±
                    user = self.db.get('BioWars', 'LastInfect')
                    # self.db.set('BioWars', 'LastInfect',
                    #            {'user_id': user['user_id'],
                    #            'status': False})
                    self.db.set('BioWars', 'LastInfect', None)

                    # user = user['user_id']
            if not user:
                return
            # –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∏–∫ –∏–∑ —Å–º—Å –∏—Ä–∏—Å–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            # name = line_raw.split()[-1]
            # if self.config['–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–æ–≤'] and str(user) not in self.db.get('BioWars', 'UsersNik') and 1>2:
            #    self.db.get('BioWars', 'UsersNik')[str(user)] = name

            # if not self.config['–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–æ–≤']:
            #    pass

            letal_in_db = self.db.get('BioWars', 'YourLetal')
            user = '@' + str(user)
            if letal != letal_in_db:
                self.db.set('BioWars', 'YourLetal', letal)

            vremya1 = vremya.strftime('%d.%m.%Y')  # strftime("%d.%m")
            vremya_do = vremya.strftime("%d.%m") if letal == 1 else (vremya +
                                                                     timedelta(days=int(letal))).strftime("%d.%m.%Y")

            # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ä–ª–∏—Å—Ç–∞ –Ω–∞–º–º–æ–¥–∞
            infectBefore = self.db.get('BioWars', 'InfectionBefore')
            infectBefore[user] = vremya_do

            self.db.set('Biowars', 'InfectionBefore', infectBefore)
            old_count = ' ' + str(infList[user][0]) if user in infList else ''
            if user in infList:
                del infList[user]

            infList[user] = [str(count), vremya1]
            self.db.set("NumMod", "infList", infList)

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–¥ –≤ –±–∞–∑—É
            await self.cooldown(user[1:], write=True)

            sms = self.strings('zar.save').format(
                user, old_count, count, vremya_do)

            # –ß–∞—Ç –∞–π–¥–∏ –ª–æ–∫–¥–∞—É–Ω–∞  –∏ –Ω–µ —Ç–æ–ª—å–∫–æ
            if (
                    message.chat_id in iris.chats
                    or self.config['–¢–∏—Ö–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ']
            ):
                return logger.warning(sanitise_text(sms))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
            if message.chat_id != -1316297204:
                await message.reply(self.strings('zar.save').format(user, old_count, count, vremya_do))
            return

            if re.fullmatch(r"–∂–¥\s@\d{3,12}.{,10}", text, flags=re.ASCII):
                if str(sndr_id) != (me.id):
                    return

            elif re.fullmatch(r"–∂–ª\s@\d{3,12}", text, flags=re.ASCII):
                if str(sndr_id) != str(me.id):
                    return

        # -----------------------Commands-------------------

    @loader.watcher(only_messages=True)
    async def watcher_dov(self, message: Message):
        """–í–∞—Ç—á–µ—Ä –¥–ª—è –¥–æ–≤–µ—Ä–∫–∏"""
        try:
            reply = await message.get_reply_message()
        except:
            reply = None
        text = message.text if message.text else ''
        sndr_id = message.sender_id
        me = await self.client.get_me()
        args_list, args_raw = utils.get_args(
            message), utils.get_args_raw(message)

        numfilter = self.db.get("NumMod", "numfilter")
        if self.config["–í–∫–ª/–í—ã–∫–ª –¥–æ–≤–µ—Ä–∫–∏"] and str(sndr_id) in self.db.get("BioWars", "DovUsers").keys() and numfilter[
            'filter']:
            nik = numfilter['filter'].lower()

            if not text.lower().startswith(nik):  # and sndr_id != me.id:
                return

            dov_users = self.db.get("BioWars", "DovUsers")

            level = dov_users[str(sndr_id)]
            # —É–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–º—è –¥–æ–≤–µ—Ä–∫–∏

            # text = text.replace(
            #    f"{nik} ", '', 1).replace(f'{nik}', '', 1)

            # –°–¥–µ–ª–∞–Ω–æ –∏–∑-–∑–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–±–ª–µ–º –∫ –∫–æ–º–∞–Ω–¥–æ–π replace
            # –û–Ω–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –∏ —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç—å –≤–≤–æ–¥–∏–º–æ–π –∫–æ–º–∞–Ω–¥—ã
            # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä +–≤–∏—Ä—É—Å—ã
            # –£–±–∏—Ä–∞–ª–æ –≤–∏—Ä –∏ —É–±–∏—Ä–∞–ª–æ –≤–∏—Ä –∏–∑ +–≤–∏—Ä—É—Å—ã, –≤ –∏—Ç–æ–≥–µ –æ—Å—Ç–∞–ª–æ–≤–∞–ª–æ—Å—å +—É—Å—ã
            if not message.out or 1 == 1:
                text = text[len(
                    nik) + 1:] if f'{nik} ' in text.lower() else text[len(nik):]
            text_low = text.lower()
            text_norm = text.replace('-f', '')

            args_raw = text
            args_list = text.split(' ')
            args = [_ for _ in args_list if _]
            if level >= 1:
                if re.fullmatch('–∑', text_norm):  # and reply:
                    reply = reply if reply else await self.last_msg(message)

                    if reply.text.startswith(r"üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"):
                        return await self.zar_search(message,
                                                     get_ne_pridumal(
                                                         [
                                                             _ for _ in reply.text.splitlines()
                                                             if _.startswith('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞—Ä–∞–∂–µ–Ω–∏—è')
                                                         ][0],
                                                         at=True
                                                     )[0]
                                                     )

                    return await self.zar_search(
                        message,
                        f'@{reply.from_id}' if not (user := get_ne_pridumal(reply.text, at=True)) else user[0]
                    )

                elif send_mes–∞ := re.search(r"–∑\s", text):
                    # logger.info(args_raw)
                    if args_raw.split()[1] == '-f' and reply:
                        user = '@' + str(reply.from_id)
                    else:
                        en = message.entities[0]
                        link = message.raw_text[en.offset:en.offset + en.length]
                        user = await self._handler_link(link) if '@' not in link else link
                    await self.zar_search(message, user)
                    return

                    # await message.reply(self.strings('zar.search').format(usr, user[0], user[1], zar_do))
                # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ª–æ—Ä–∞–±–æ—Ç–∫–µ
                elif mes := re.fullmatch(r'(–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä|–∫|–∫–∞–ª–∫) (\w+) (\d+(-\d+)?)', text_low):
                    pass
                    skill = mes.group(2)
                    n = mes.group(3).split('-')

                    if re.search(r"–∑–∑|–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['zar']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['letal']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['pat']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–ø–∞—Ç–æ–≥–µ–Ω–∞ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['kvala']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'
                        await message.reply(text_msg)
                        return

                    elif re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4})", text_low, flags=re.ASCII):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['imun']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'
                        await message.reply(text_msg)
                        return

                    elif re.search(r'(?P<sb>—Å–±|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}|—Å–ª—É–∂–±[–∞—É]{,2})', text_low):
                        n1, n2 = int(n[0]), int(n[1])
                        step = self.strings('calc_formul')['sb']
                        total = 0
                        for i in range(n1 + 1, n2 + 1):
                            total += int(i ** step)
                        total = '{:,}'.format(total).replace(',', '.')

                        text_msg = f'<b>üíµ –£–ª—É—á—à–µ–Ω–∏–µ —Å</b> <i>{n1}</i> <b>–¥–æ</b> <i>{n2}</i> <b>–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏—Ç:</b> <i>{total}</i> <b>–±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>'

                        await message.reply(text_msg)
                        return
                    else:
                        return

                elif inf := re.search(
                        r"(–±–µ–π{,3}|–∫—É—Å[—å–∞–π–Ω–∏]{,3}|–∑–∞—Ä–∞–∑–∏[—Ç—å—Ç—å]{,3}|–µ–±[–Ω–∏–∞–∂—à—å]{,3}|"
                        r"—É–µ–±[–∏–∞–æ—à—Ç—å]{,3}|–æ–ø—É—Å—Ç[–∏]{,3}|–æ—Ä–≥–∞–Ω–∏–∑—É–π –≥–æ—Ä—è—á–∫—É{,3})",
                        text_low, flags=re.ASCII):
                    inf = inf.group(1)

                    text = text.replace(
                        f"{inf} ", '').replace(inf, '')

                    args_raw = text
                    args_list = args_raw.split(' ')

                    if args_raw.lower() == '—Å—Ç–æ–ø':
                        status = self.db.get("BioWars", "infStatus")
                        if status:
                            self.db.set("BioWars", "infStatus", False)
                            await utils.answer(message, '‚úÖ –ó–∞—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
                            return
                        else:
                            await utils.answer(message, '‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã')
                            return

                    if args_list[0] == '–∏–Ω—Ç–µ—Ä–≤–∞–ª':
                        if args_list[1] and args_list[1].isdigit():
                            time = float(args_list[1].replace(',', '.'))
                            self.db.set("BioWars", "infInterval", time)
                            await utils.answer(message, f'‚è± –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º–∏: {time} —Å')
                            return
                        else:
                            await utils.answer(message, f'‚ùé –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–≤–µ—Ä–≤–∞–ª!')
                            return
                    # re.search(r"(?P<lvl>[1-9]?[0]?\s)?(?P<link>@[0-9a-zA-Z_]+|(?:https?://)?t\.me/[0-9a-zA-Z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))", text):
                    if send_mes–∞ := re.search(
                            r"(?P<lvl>[\d]+?[0]?\s)?(?P<link>@[0-9a-zA-Z_]+|(?:https?://)?t\.me/[0-9a-zA-Z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))",
                            text):
                        if self.db.get("BioWars", "infStatus"):
                            await message.reply('‚ùé –ó–∞—Ä–∞–∂–µ–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
                            return

                        send_mes–∞ = send_mes–∞.groupdict()

                        send_mes–∞['link'], send_mes–∞['id'] = '@' + \
                                                             send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞[
                            'link'], ''
                        send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''

                        # –µ—Å–ª–∏ —á–∏—Å–ª–æ –ø–∞—Ç–æ–≥–µ–Ω –±–æ–ª—å—à–µ 10, —Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 10
                        try:
                            if int(send_mes–∞['lvl']) > 10:
                                send_mes–∞['lvl'] = '10 '
                        except:
                            pass

                        mes = ''.join(send_mes–∞.values())

                        user = send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link']

                        user = user.replace(
                            '@', '').replace('https://t.me/', '')

                        await self.autohill(message)
                        await self.save_last_infect(user)
                        self.db.set("BioWars", "infStatus", True)
                        await message.reply(f'–∑–∞—Ä–∞–∑–∏—Ç—å {mes}')
                        self.db.set("BioWars", "infStatus", False)
                        return

                    await self.z_command(message, args_raw, text, reply)
                    return

                elif re.search(r"–≤–∞–∫[—Ü–∏–Ω–∞—É]{,3}|–ª–µ—á[–∏—Å—å]{,2}|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]{,2}|–ª–µ–∫[–∞—Ä—Å—Ç–≤–æ]{,2}",
                               text_low, flags=re.ASCII
                               ):
                    await self.autohill(message, reset=True)
                    await message.reply('!–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É')
                    return

                elif re.fullmatch(r"–ª[–∞—É]{,2}", text, flags=re.ASCII):  # —Ä–µ–≥—É–ª—è—Ä–∫–∞
                    lab_raw = await self.message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
                        f".–ª–∞–±",
                        5443619563,
                        mark_read=True,
                        delete=True,
                    )
                    if lab_raw == 'Timeout':
                        await message.respond('‚ùé –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ò—Ä–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å')

                    lab_lines = lab_raw.splitlines()  # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    lab_args = self.config['–ê—Ä–≥—É–º–µ–Ω—Ç—ã –ª–∞–±—ã'].split()

                    if "üî¨ –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" not in lab_lines[0]:
                        return

                    sms = await self.get_lab(lab_raw, lab_args)
                    await message.reply(sms)
                    return
                elif args_raw.lower() == '–±–∏–æ' or args_raw.lower() == '–±':
                    if not reply:
                        await utils.answer(message, self.strings('no.reply'))
                        return
                    await self.bio_command(message, reply, me)
                    return

            if level >= 2:
                # –ó–∞–ø–∏—Å—å –∂–µ—Ä—Ç–≤ —Å –ø–æ–º–æ—â—å—é –¥–æ–≤–∞
                # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä –∂–¥ @777000 1.1–∫
                if text_low.startswith('–∂–¥') and len(args) in [2, 3]:
                    args.pop(0)

                    if len(args) == 1:
                        if not reply:
                            return

                        user = reply.from_id

                    else:
                        if not (user := get_ne_pridumal(args[0])):
                            return

                        args.pop(0)

                        if not (user := user[0]).isdigit():
                            user = await self.return_user(username=user)

                    try:
                        exp = str(_exp(args[0]))
                    except Exception as e:
                        return logger.exception(e)

                    old, old_do = None, None
                    if (user := f'@{user}') in self.zl.keys():
                        old = self.zl[user]
                        del self.zl[user]

                    if user in self.zl_do.keys():
                        old_do = self.zl_do[user]

                    self.zl[user] = [
                        exp, datetime.now(tz=pytz.timezone(self.tz)).strftime(DT_FORMAT)
                    ]

                    if self.letal != 1:
                        self.zl_do[user] = (
                                datetime.now(tz=pytz.timezone(self.tz)) + timedelta(days=self.letal)
                        ).strftime(DT_FORMAT2)

                    async def cancel_zhd(call: InlineCall) -> '–Ω–µ –µ–±—É —à–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –ª–µ–Ω—å —á–µ–∫–∞—Ç—å':
                        """
                        –æ—Ç–º–µ–Ω—è–µ—Ç —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã
                        """
                        if str(call['from']['id']) not in self.dovs.keys():
                            return await call.answer(choices(self.strings('wrong_click'))[0])

                        if old_do:
                            self.zl_do[user] = old_do

                        if old:
                            self.zl[user] = old

                        else:
                            with contextlib.suppress(Exception):
                                del self.zl[user]
                                del self.zl_do[user]

                        await call.delete()

                    await self.inline.form(
                        self.strings('zar.save').format(
                            (
                                # f'<a href="tg://openmessage?user_id={user[1:]}">{self.niks[user[1:]]}</a>'
                                # if user[1:] in self.niks.keys() else
                                f'<code>{user}</code>'
                            ),
                            ' ' + old[0] if old else '',
                            exp,
                            self.zl_do[user] if user in self.zl_do.keys() else 'üò¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        ),
                        message,
                        {'text': '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', 'callback': cancel_zhd},
                        disable_security=True
                    )
                # –£–¥–∞–ª–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤ —Å –ø–æ–º–æ—â—å—é –¥–æ–≤–∞
                # –ü—Ä–∏–º–µ—Ä: –≤–∏—Ä –∂—É @777000 1.1–∫
                if text_low.startswith('–∂—É') and len(args) == 1:
                    if not (user := get_ne_pridumal(args[0])):
                        return

                    if not (user := user[0]).isdigit():
                        user = await self.return_user(username=user)

                        # –ß–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–∫–∏
                elif reg := re.fullmatch(r'(—Ç–æ–ø –∂–µ—Ä—Ç–≤[—ã–∞—É]{,2})( (\d+)|())', text_low, flags=re.ASCII):
                    n = reg.group(2) if reg.group(2) else 1
                    await self.get_top_zhertv(message=message, num_list=n)
                    return

                elif reg := re.fullmatch(r'(—Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤[—ã–∞—É]{,2})( (\d+)|())', text_low, flags=re.ASCII):
                    n = reg.group(2) if reg.group(2) else 1
                    await self.get_zhertv(message=message, num_list=int(n))
                    return

            if level >= 3:
                # –ß–µ–∫ –±–æ–ª–µ–∑–Ω–µ–π
                if re.fullmatch(r"(–±–æ–ª–µ–∑–Ω–∏|–±–æ–ª) -rt", text_low, flags=re.ASCII):
                    await message.reply('/–º–æ–∏ –±–æ–ª–µ–∑–Ω–∏')
                    return

                elif reg := re.fullmatch(r'(–±–æ–ª[–µ–∑–Ω–∏]*)( (\d+)|())', text_low, flags=re.ASCII):
                    n = reg.group(2) if reg.group(2) else 1
                    await self.get_bolezni(message, int(n))
                    return
                # —Ñ–µ—Ä–º–∞
                elif re.search(r'—Ñ–µ—Ä–º–∞', text_low):
                    await message.respond('—Ñ–µ—Ä–º–∞')
                # –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—à–∫–∞
                elif re.fullmatch(r'–º–µ—à–æ–∫ -rt', text_low):
                    await message.respond('.–º–µ—à–æ–∫')
                    return

                elif re.fullmatch(r'–º–µ—à–æ–∫', text_low):
                    q = await self.message_q('.–º–µ—à–æ–∫')
                    if q == 'Timeout':
                        await message.respond('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏—Ä–∏—Å–∞ –∏—Å—Ç–µ–∫–ª–æ')
                        return

                    if not q.startswith('üí∞ –í –º–µ—à–∫–µ'):
                        return
                    q = q.replace(
                        'üí¨ –ó–∞–ø–∞—Å—ã –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É "–∫—É–ø–∏—Ç—å {—á–∏—Å–ª–æ}"', '')
                    await utils.answer(message, q)
                    return

                if send_mes–∞ := re.search(r"–ª–∞–±[–∞—É]{,2}(?P<args>(\s(\w{1,12})){1,})", text_low, flags=re.ASCII):

                    send_mes–∞ = send_mes–∞.groupdict()
                    lab_args = send_mes–∞['args'].split()
                    lab_raw = await self.message_q(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
                        f".–ª–∞–±",
                        5443619563,
                        mark_read=True,
                        delete=True,
                    )
                    if lab_raw == 'Timeout':
                        await message.respond('‚ùé –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ò—Ä–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å')

                    lab_lines = lab_raw.splitlines()  # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    if "üî¨ –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" not in lab_lines[0]:
                        return

                    sms = ""
                    sms += await self.get_lab(lab_raw, lab_args)

                    await message.reply(sms)
                    return

            if level == 4:
                # –ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
                if send_mes := re.search(
                        r"(?P<ch>–∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5} —á–µ–∫[–Ω—É—Ç—å–∏–∞–π]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['ch'] = '+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)

                elif send_mes := re.search(
                        r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['pat'] = '+–ø–∞—Ç–æ–≥–µ–Ω '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(
                        r"(?P<let>–ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5}\s)(?P<lvl>[1-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['let'] = '+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(
                        r"(?P<kvala>–∫–≤–∞–ª[–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è—É]{,8} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s)(?P<lvl>[0-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['kvala'] = '+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(
                        r"(?P<imun>—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|–∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s)(?P<lvl>[0-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['imun'] = '+–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(
                        r"(?P<sb>—Å–± —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Å–ª—É–∂–±[–∞—É]{,2} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–ª—É–∂–±[–∞—É]{,2}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–±\s)(?P<lvl>[0-5]+)",
                        text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['sb'] = '+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                # –∫–∞—á    –∞–ª–∫–∏
                elif send_mes := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['zar'] = '++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['pat'] = '++–ø–∞—Ç–æ–≥–µ–Ω '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[1-5]+)", text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['let'] = '++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s)(?P<lvl>[0-5]+)",
                                           text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['kvala'] = '++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}\s)(?P<lvl>[0-5]+)",
                                           text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['imun'] = '++–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)
                elif send_mes := re.search(r"(?P<sb>—Å–±\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—Å–ª—É–∂–±[–∞—É]{,2}\s)(?P<lvl>[0-5]+)",
                                           text_low, flags=re.ASCII):
                    send_mes = send_mes.groupdict()
                    send_mes['sb'] = '++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                    send_mes['lvl'] = send_mes['lvl'] or ''
                    mes = ''.join(send_mes.values())
                    await message.reply(mes)

                # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞–º–∏
                elif re.search(r'\+–≤–∏—Ä—É—Å[–∞—ã]{,2}|—É–≤–µ–¥[—ã–æ–º–ª–µ–Ω–∏—è]', text_low):
                    await message.reply('+–≤–∏—Ä—É—Å—ã')

                elif re.search(r'-–≤–∏—Ä—É—Å[–∞—ã]{,2}', text_low):
                    await message.reply('-–≤–∏—Ä—É—Å—ã')

                # –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ª–∞–±—ã –∏ –ø–∞—Ç–∞

                elif send_mesa := re.search(r'\+–ø–∞—Ç[–æ–≥–µ–Ω]{,4}(?P<pat>(\s(\w{1,12})){1,})', text_norm):

                    send_mesa = send_mesa.groupdict()
                    pat = ' '.join(send_mesa['pat'].split())

                    await message.reply(f'+–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞ {pat}')
                    return

                elif send_mesa := re.search(r'\+–ª–∞–±[a]{,1}(?P<lab>(\s(\w{1,12})){1,})', text_norm):

                    send_mesa = send_mesa.groupdict()
                    pat = ' '.join(send_mesa['lab'].split())

                    await message.reply(f'+–∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ {pat}')
                    return

                elif send_mesa := re.search(r'-–ø–∞—Ç[–æ–≥–µ–Ω]{,4}', text_low):
                    await message.reply(f'-–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞')
                    return

                elif send_mesa := re.search(r'-–ª–∞–±[a]{,1}', text_low):
                    await message.reply(f'-–∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏')
                    return

                # –ß–µ–∫ —Ñ—É–ª–ª –ª–∞–±—ã
                if re.fullmatch(r'–º–æ—è –ª–∞–±–∞', text):
                    await message.respond('–º–æ—è –ª–∞–±–∞')

    @loader.watcher(only_messages=True)
    async def watcher_commands(self, message: Message):
        """–í–∞—Ç—á–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        if not message.text:
            return
        try:
            reply = await message.get_reply_message()
        except:
            reply = None
        text = message.text
        sndr_id = message.sender_id
        me = await self.client.get_me()
        pref = await self.get_pref()
        args_list, args_raw = utils.get_args(
            message), utils.get_args_raw(message)
        owners = list(getattr(self.client.dispatcher.security, "owner"))

        if text.startswith(pref) and sndr_id in owners:
            try:
                command = text.replace(pref, "").split()[0].lower()
            except IndexError:
                return

            if command not in self.strings("—Åommands"):
                return

            if command == "z":
                await self.z_command(message, args_raw, text, reply)
                return
            elif command == "id":
                await self.id_command(message, args_raw, reply)
                return
            elif command == "ids":
                await self.ids_command(message, args_raw, reply)
                return
            elif command == "dov":
                await self.dov_command(message, args_list, args_raw, reply)
                return
            elif command == 'zz':
                await self.bio_command(reply, me)
                return
            elif command == 'nik':
                await self.nik_command(message, args_list, args_raw)
                return
            elif command == 'pref':
                await self.pref_command(message, args_list)
                return