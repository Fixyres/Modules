import datetime
import logging
import time

from telethon.tl.types import Message

from .. import loader, main, utils

logger = logging.getLogger(__name__)


class CendPingMod(loader.Module):
    '''–ò—Å–ø—Ä–∞–ª–≤–∫–Ω—ã–π –º–æ–¥—É–ª—å CendPing –æ—Ç @zxcendi, –∏—Å–ø–ø—Ä–∞–≤–ª—è–ª @userbotik'''
    strings = {
        "name": "CendPing",
        "uptime": "üï∑Ô∏è <b>–ê–ø—Ç–∞–π–º</b>",
        "com": "{} <code>{}</code> <b>–º—Å</b>\n{}",
        "modulesupports": "–ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è {time} –∏ {uptime}",
        "pingmsg": "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "ceping_message",
                "<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>Ping:</b>",
                lambda: self.strings("cepingmsg"),
            ),
            loader.ConfigValue(
                "custom_message",
                "<emoji document_id=5445284980978621387>üöÄ</emoji> <b>Uptime: {uptime}</b>",
                doc=lambda: self.strings("modulesupports"),
            ),
            loader.ConfigValue(
                "download",
                "<emoji document_id=5188377234380954537>üåò</emoji>",
                doc=lambda: self.strings("modulesupports"),
            ),
            loader.ConfigValue(
                "timezone",
                "3",
                lambda: "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1, -1, -3 –∏ —Ç. –¥. –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {time}.",
            ),
        )

    def _render_ping(self):
        offset = datetime.timedelta(hours=self.config["timezone"])
        tz = datetime.timezone(offset)
        time2 = datetime.datetime.now(tz)
        time = time2.strftime("%H:%M:%S")
        uptime = utils.formatted_uptime()
        return (
            self.config["custom_message"].format(
                time=time,
                uptime=uptime,
            )
            if self.config["custom_message"] != "no"
            else (f'{self.strings("uptime")}: <b>{uptime}</b>')
        )

    @loader.command(command="p", aliases=["ping"])
    async def p(self, message: Message):
        """- –ü–æ–ª—É—á–∏—Ç—å –ø–∏–Ω–≥"""
        ceping = self.config["ceping_message"]
        start = time.perf_counter_ns()
        download_config = self.config["download"]
        
        if isinstance(download_config, set):
            download_config = list(download_config)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å set –≤ list
            message = await utils.answer(message, download_config)
        else:
            message = await utils.answer(message, download_config)
        
        try:
            await utils.answer(
                message,
                self.strings("com").format(
                    ceping,
                    round((time.perf_counter_ns() - start) / 10**6, 3),
                    self._render_ping(),
                ),
            )
        except TypeError:
            await utils.answer(
                message,
                "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –≤ .config -> cenping -> timezone, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ",
            )