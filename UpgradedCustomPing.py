from hikkatl.types import Message
from .. import loader, utils
import time
import psutil
import os
import platform
import subprocess

"""
    Licensed under the GNU AGPLv3	
"""

# meta banner: https://i.ibb.co/wNDp6Sb/b3be3f0c-cb6a-4443-afaf-b569bb369401.jpg
# meta developer: Ksenon

@loader.tds
class UCustomPing(loader.Module):
    """Just upgraded custom ping."""

    strings = {
        "name": "UpgradedCustomPing",
        "configping": "–ö–∞—Å—Ç–æ–º —Ç–µ–∫—Å—Ç, –ª–æ–ª.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
        "{prefix} - –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥\n"
        "{ping} - –ø–∏–Ω–≥\n"
        "{uptime} - –∞–ø—Ç–∞–π–º\n"
        "{ram_used} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è RAM\n"
        "{ram_total} - –æ–±—â–∞—è RAM\n"
        "{disk_used} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å\n"
        "{disk_total} - –æ–±—â–∞—è –ø–∞–º—è—Ç—å\n"
        "{hikka_version} - –≤–µ—Ä—Å–∏—è Hikka\n"
        "{branch} - —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞\n"
        "{cpu_info} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ\n"
        "{cpu_usage} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU\n"
        "{os_info} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "text",
                "<b><emoji document_id=5456140674028019486>‚ö°Ô∏è</emoji> –ü–∏–Ω–≥:</b> <code>{ping}</code> –º—Å\n"
                "<b><emoji document_id=5244837092042750681>üìà</emoji> –ê–ø—Ç–∞–π–º:</b> <code>{uptime}</code>\n"
                "<b><emoji document_id=5416117059207572332>‚û°Ô∏è</emoji> –ü—Ä–µ—Ñ–∏–∫—Å:</b> <code>{prefix}</code>\n"
                "<b><emoji document_id=5217822164362739968>üëë</emoji> RAM:</b> <code>{ram_used:.2f}GB | {ram_total:.2f}GB</code>\n"
                "<b><emoji document_id=5282843764451195532>üñ•</emoji> –ü–∞–º—è—Ç—å:</b> <code>{disk_used:.2f}GB | {disk_total:.2f}GB</code>\n"
                "<b><emoji document_id=5438496463044752972>‚≠êÔ∏è</emoji> –í–µ—Ä—Å–∏—è Hikka:</b> <code>{hikka_version}</code>\n"
                "<b><emoji document_id=5305265301917549162>üìé</emoji> –í–µ—Ç–∫–∞:</b> <code>{branch}</code>\n"
                "<b><emoji document_id=5341715473882955310>‚öôÔ∏è</emoji> –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> <code>{cpu_info}</code>\n"
                "<b><emoji document_id=5424972470023104089>üî•</emoji> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:</b> <code>{cpu_usage}%</code>\n"
                "<b><emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> –û–°:</b> <code>{os_info}</code>",
                lambda: self.strings["configping"],
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "banner_url",
                "https://i.ibb.co/wNDp6Sb/b3be3f0c-cb6a-4443-afaf-b569bb369401.jpg",
                lambda: "URL –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ping",
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "ceping_message",
                "<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>Ping:</b>",
                lambda: "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
            ),
            loader.ConfigValue(
                "custom_message",
                "<emoji document_id=5445284980978621387>üöÄ</emoji> <b>Uptime: {uptime}</b>",
                doc=lambda: "–ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è {time} –∏ {uptime}",
            ),
            loader.ConfigValue(
                "download",
                "<emoji document_id=5188377234380954537>üåò</emoji>",
                doc=lambda: "–ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è {time} –∏ {uptime}",
            ),
            loader.ConfigValue(
                "timezone",
                "3",
                lambda: "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1, -1, -3 –∏ —Ç. –¥. –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {time}.",
            ),
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    def get_cpu_info(self):
        try:
            with open('/proc/cpuinfo', 'r') as f:
                for line in f:
                    if 'model name' in line:
                        return line.split(':')[1].strip()
        except:
            pass
        try:
            result = subprocess.check_output(['cat', '/proc/cpuinfo']).decode('utf-8')
            for line in result.split('\n'):
                if 'model name' in line:
                    return line.split(':')[1].strip()
        except:
            pass
        return platform.processor() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _render_ping(self):
        import datetime
        offset = datetime.timedelta(hours=self.config["timezone"])
        tz = datetime.timezone(offset)
        time2 = datetime.datetime.now(tz)
        time = time2.strftime("%H:%M:%S")
        uptime = utils.formatted_uptime()
        return (
            self.config["custom_message"].format(
                time=time,
                uptime=uptime,
            )
            if self.config["custom_message"] != "no"
            else (f'üï∑Ô∏è <b>–ê–ø—Ç–∞–π–º</b>: <b>{uptime}</b>')
        )

    @loader.command(
        ru_doc=" - –£–∑–Ω–∞—Ç—å –ø–∏–Ω–≥ –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞",
    )
    async def cping(self, message: Message):
        """- –£–∑–Ω–∞—Ç—å –ø–∏–Ω–≥ –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞"""
        ceping = self.config["ceping_message"]
        start = time.perf_counter_ns()
        download_config = self.config["download"]

        if isinstance(download_config, set):
            download_config = list(download_config)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å set –≤ list
            message = await utils.answer(message, download_config)
        else:
            message = await utils.answer(message, download_config)

        try:
            ping_ms = round((time.perf_counter_ns() - start) / 10**6, 3)
            
            ram = psutil.virtual_memory()
            ram_used = ram.used / (1024 ** 3)
            ram_total = ram.total / (1024 ** 3)
            disk = psutil.disk_usage('/')
            disk_used = disk.used / (1024 ** 3)
            disk_total = disk.total / (1024 ** 3)
            hikka_version, branch = self.get_hikka_version()
            cpu_info = self.get_cpu_info()
            cpu_usage = psutil.cpu_percent(interval=1)
            os_info = f"{platform.system()} {platform.release()}"
            prefix = self.get_prefix()

            text = self.config["text"].format(
                prefix=prefix,
                ping=ping_ms,
                uptime=utils.formatted_uptime(),
                ram_used=ram_used,
                ram_total=ram_total,
                disk_used=disk_used,
                disk_total=disk_total,
                hikka_version=hikka_version,
                branch=branch,
                cpu_info=cpu_info,
                cpu_usage=cpu_usage,
                os_info=os_info,
            )

            banner = self.config["banner_url"]

            try:
                await self.client.send_file(message.chat_id, banner, caption=text)
                if message.out:
                    await message.delete()
            except Exception:
                await utils.answer(message, text)
        except TypeError:
            await utils.answer(
                message,
                "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –≤ .config -> cenping -> timezone, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ",
            )

    def get_prefix(self):
        """–≥–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å."""
        return self.db.get("hikka.main", "command_prefix", ".")

    def get_hikka_version(self):
        """–≥–µ—Ç –∑–µ —Ö–∏–∫–∫–∞ –±—Ä–∞–Ω—á."""
        try:
            version_file = os.path.join(utils.get_base_dir(), "version.py")
            with open(version_file, "r") as f:
                content = f.read()
                version_tuple = eval(content.split("__version__ = ")[1].split("\n")[0])
                version = ".".join(map(str, version_tuple))

                try:
                    branch = content.split('branch = "')[1].split('"')[0]
                except Exception:
                    branch = "master"

                return version, branch
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"