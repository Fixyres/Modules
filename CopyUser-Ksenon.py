from .. import loader, utils
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon.errors import UsernameNotOccupiedError, UsernameInvalidError, ImageProcessFailedError
import io

#meta developer: Ksenon | @justksenon

@loader.tds
class CopyUserModule(loader.Module):
    """üñºÔ∏è –ö–æ–ø–∏—Ä—É–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç"""

    strings = {"name": "CopyUser-Ksenon"}

    @loader.command()
    async def copyuser(self, message):
        """üñºÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .copy <username>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "üëâ –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return

        try:
            user = await message.client.get_entity(args)
            full_user = await message.client(GetFullUserRequest(user.id))
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            if full_user.full_user.profile_photo:
                try:
                    avatar = await message.client.download_profile_photo(user, bytes)
                    if avatar:
                        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
                        photos = await message.client.get_profile_photos('me')
                        await message.client(DeletePhotosRequest(photos))
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
                        await message.client(UploadProfilePhotoRequest(
                            file=await message.client.upload_file(io.BytesIO(avatar))
                        ))
                        await utils.answer(message, "‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                    else:
                        await utils.answer(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                except ImageProcessFailedError:
                    await utils.answer(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            else:
                await utils.answer(message, "‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            await message.client(UpdateProfileRequest(
                first_name=user.first_name or "",
                last_name=user.last_name or "",
                about=full_user.full_user.about or ""
            ))
            
            await utils.answer(message, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
        except UsernameNotOccupiedError:
            await utils.answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        except UsernameInvalidError:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username!")
        except Exception as e:
            await utils.answer(message, f"üòµ –û—à–∏–±–∫–∞: {str(e)}")