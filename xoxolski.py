#meta developer: @hewin
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class XoxolskiMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∞ '–∏–≥—Ä–∏–≤—ã–π' –¥–∏–∞–ª–µ–∫—Ç."""
    strings = {"name": "Xoxolski"}

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–ª–æ–≤
    translate_map = {
        "–∏": "—ñ",
        "–ò": "—ñ",
        "—ã": "—ñ",
        "–´": "—ñ",
        "—á—Ç–æ": "—à–æ",
        "–ß—Ç–æ": "—à–æ",
        "–≠": "—î",
        "–µ": "—î",
        "–ø–æ—à–µ–ª": "–ø—ñ—à–æ–≤",
        "–ü–æ—à–µ–ª": "–ø—ñ—à–æ–≤",
        "–µ": "—î",
        "—ç": "—î"
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.db = db
        self._client = client
        self.enabled = self.db.get("Xoxolski", "enabled", False)

    async def xoxolcmd(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.enabled = not self.enabled
        self.db.set("Xoxolski", "enabled", self.enabled)
        response_text = "<b><emoji document_id=5373230968943420212>üñ§</emoji> —è–∑—ã–∫ —É–∫—Ä–∞–∏–Ω—Ü–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω</b>" if self.enabled else "‚ùå <b>—É–∫—Ä–∞–∏–Ω–µ—Ü –≤—ã–∫–ª—é—á–µ–Ω </b>"
        return await utils.answer(message=message, response=response_text)

    async def xoxolzcmd(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        reply = await message.get_reply_message()
        if reply and reply.text:
            translated_text = self.translate_text(reply.text)
            await utils.answer(message=message, response=translated_text)

    def translate_text(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è –∑–∞–º–µ–Ω—ã."""
        for key, value in self.translate_map.items():
            text = text.replace(key, value)
        return text

    async def watcher(self, message: Message):
        """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–µ–Ω."""
        if self.enabled and message.out and message.text:
            translated_text = self.translate_text(message.text)
            if message.text != translated_text:
                await self._client.edit_message(message.peer_id, message.id, translated_text),