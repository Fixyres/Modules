version = (1, 4, 8, 9)

#meta banner: https://envs.sh/gQg.jpg
# meta developer: @moduleslist

from hikka import loader, utils
import asyncio
from datetime import datetime, timedelta
from telethon import functions

@loader.tds
class OtlozhkaMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    strings = {
        "name": "Otlozhka",
        "reqj": "ü™ê –ö–∞–Ω–∞–ª —Å–±–æ—Ä–Ω–∏–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π!",
        "no_scheduled": "‚ùå –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        "deleted": "‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã: {}"
    }
    
    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        
        await self.request_join(
            "@moduleslist",
            (
                self.strings['reqj']
            ),
            )

    async def otlozhkacmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π .otlozhka <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"""
        args = utils.get_args_raw(message).split(' ', 2)

        if len(args) < 3:
            await message.edit("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç.")
            return

        if not args[0].isdigit() or not args[1].isdigit():
            await message.edit("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        interval = int(args[0]) * 60  
        message_count = int(args[1])   
        text = args[2]                 
        chat_id = message.chat_id

        await message.edit("‚åõ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")

        for i in range(message_count):
            send_time = datetime.now() + timedelta(seconds=interval * i)
            await self.client.send_message(chat_id, text, schedule=send_time)

        await message.respond(f"‚úÖ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval // 60} –º–∏–Ω—É—Ç.")

    async def rmotlozhkacmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = message.chat_id
        
        await message.edit("üîÑ –ü–æ–∏—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            scheduled = await message.client(functions.messages.GetScheduledHistoryRequest(
                peer=chat_id,
                hash=0
            ))
            
            if not scheduled.messages:
                await message.edit(self.strings["no_scheduled"])
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.client(functions.messages.DeleteScheduledMessagesRequest(
                peer=chat_id,
                id=[msg.id for msg in scheduled.messages]
            ))
            
            count = len(scheduled.messages)
            await message.edit(self.strings["deleted"].format(count))
            
        except Exception as e:
            await message.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")