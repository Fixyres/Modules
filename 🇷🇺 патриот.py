# meta developer: @shkipermolodec 

from .. import loader, utils

from contextlib import suppress
from telethon.tl.types import Message, MessageMediaPhoto


@loader.tds
class VatnikMod(loader.Module):
    strings = {
        "name": "üá∑üá∫ –ü–∞—Ç—Ä–∏–æ—Ç"
    }
    
    translate_map = {
        ord("–∑"): "Z",
        ord("–ó"): "Z",
        ord("z"): "Z",
        ord("–æ"): "O",
        ord("o"): "–û",
        ord("–≤"): "V",
        ord("–í"): "V",
        ord("v"): "V"
    }
    
    async def client_ready(self, client, db):
        self.db = db
        self._client = client

        self.enabled = self.db.get("patriot", "enabled", False)
    
    async def patriotcmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–∞—Ç—Ä–∏–æ—Ç–∞"""
        
        self.enabled = not self.enabled
        self.db.set("patriot", "enabled", self.enabled)
        
        if self.enabled:
            return await utils.answer(
                message=message,
                response="<b>üá∑üá∫ –ü–∞—Ç—Ä–∏–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω. –°—Ç—Ä–∞–Ω–∞ –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ</b>"
            )
        
        else:
            return await utils.answer(
                message=message,
                response="‚ùå <b>–ü–∞—Ç—Ä–∏–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω</b>"
            )
    
    async def patcmd(self, message: Message):
        """pat —Å–æ–æ–±—â–µ–Ω–∏–µ. <reply>"""
        
        reply = await message.get_reply_message()
        
        translated_text = reply.text.translate(self.translate_map)

        await utils.answer(
            message=message,
            response=f"üá∑üá∫ <b>–ü–∞—Ç—Ä–∏–æ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ</b>:\n\n{translated_text}"
        )

    
    async def watcher(self, message: Message):
        if self.enabled:
            if message.out:
                translated_text = message.text.translate(self.translate_map)
                
                if message.text != translated_text:
                    await self._client.edit_message(message.peer_id, message.id, translated_text)